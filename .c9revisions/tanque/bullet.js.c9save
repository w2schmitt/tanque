{"ts":1375835796756,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"function Bullet(x,y, sprite) {\n    this.pos = {x:x,y:y};\n    this.type = \"bullet\";\n    this.owner = null;\n    //this.spriteSheet = null;\n    this.currentSprite = sprite;\n    this.direction = {Up:\"Up\",Right:\"Right\",Down:\"Down\",Left:\"Left\"};    \n    this.currentDirection = null;\n    this.intDirection = {x:0,y:0};\n    this.currentSpeed = {x:0,y:0}\n    this.bulletSpeed = 9;\n    this.bulletSize = 16;\n    this.explosionRect = null;\n    this.explosionColliderInfo = {x:0,y:0, w:0, h:0};\n    this.remove = false;\n    this.castExplosion = true;\n    this.exploded = false;\n    this.hit = false;\n    this.breakSteel = false;\n    \n    \n    this.update = function(){\n        this.pos.x += this.currentSpeed.x;\n        this.pos.y += this.currentSpeed.y;\n    }\n    this.calculateSpeed = function(){\n        with (this.direction){ //with lixo\n            if (this.currentDirection == Up){\n                this.currentSpeed.y -= this.bulletSpeed;\n                this.intDirection.y = -1;\n            }\n            if (this.currentDirection == Down){\n                this.currentSpeed.y += this.bulletSpeed;\n                this.intDirection.y = 1;\n            }\n            if (this.currentDirection == Left){\n                this.currentSpeed.x -= this.bulletSpeed;\n                this.intDirection.x = -1;\n            }\n            if (this.currentDirection == Right){\n                this.currentSpeed.x += this.bulletSpeed;\n                this.intDirection.x = 1;\n            }\n            \n        }\n    }\n\n    this.getIntDirection = function(){\n\n    }\n    \n    this.defaultCollision = function(info, other){\n        var self = info.obj;\n        if (other.type === \"tile\"){\n            if (!other.tile.bulletPassThrough){\n                var gridSize = other.obj.tileSize;\n                self.remove = true;   \n                this.castExplosion = true; \n                self.explosionColliderInfo = {x:(other.x*gridSize), y:(other.y*gridSize), w:other.tile.size.x, h:other.tile.size.y};\n            }\n        }\n        else if (other.type === \"bullet\" && (other.obj.owner.type !== self.owner.type)){\n            self.remove = true;\n            this.castExplosion = false;\n        }\n        else if (other.type === \"player\" || (other.type === \"enemy\" && self.owner.type !== \"enemy\")) {\n            if (self.owner !== other.obj && !other.obj.spawning){\n                self.remove = true;\n                self.setBulletExplosion(self.pos.x-8, self.pos.y-8);\n            }\n            //console.log(\"teste\");\n        }\n        else if (other.type === \"general\"){\n            self.remove = true;\n        }\n        //else if (other.type === \"general\" || other.type === \"player\" || other.type === \"enemy\"){\n        //    self.remove = true;\n        //    this.castExplosion = false;\n        //}\n        //\n        if (self.remove && this.castExplosion && !this.exploded){\n            self.setBulletExplosion(self.pos.x-8, self.pos.y-8);\n           \n            //console.log(\"criou\");\n        }\n    }\n\n    this.setBulletExplosion = function(x,y){\n        this.exploded = true;\n        allExplosions.push(new Explosion(x,y,explosionSpriteSheet, \"Small\"));\n    }\n    \n    this.createExplosionObject = function(){\n        var r;\n        // ver se não dá pra fazer isso de um jeito menos burro\n        with(this.direction){\n            switch(this.currentDirection){\n                case Up:    this.explosionColliderInfo.x=this.pos.x+this.bulletSize/2; r={offx:-this.bulletSize, offy:this.explosionColliderInfo.h-this.bulletSize/2, w:32, h:8}; break;\n                case Down:  this.explosionColliderInfo.x=this.pos.x+this.bulletSize/2; r={offx:-this.bulletSize, offy:0,  w:32, h:8}; break;\n                case Left:  this.explosionColliderInfo.y=this.pos.y+this.bulletSize/2; r={offx:this.explosionColliderInfo.w-this.bulletSize/2, offy:-this.bulletSize,  w:8,  h:32}; break;\n                case Right: this.explosionColliderInfo.y=this.pos.y+this.bulletSize/2; r={offx:0, offy:-this.bulletSize,  w:8,  h:32}; break;\n            }\n        }\n        \n        this.explosionRect = r;\n        return {obj:{pos:this.explosionColliderInfo, breakSteel:this.breakSteel, currentSpeed:{x:0,y:0}}, type:\"explosion\" ,w:r.w, h:r.h};\n    }\n    \n    this.deafultExplosionCollision = function(info, other){\n        \n    }\n}"]],"start1":0,"start2":0,"length1":0,"length2":4300}]],"length":4300}
{"contributors":[],"silentsave":false,"ts":1375835826650,"patch":[[{"diffs":[[0," }\n\n"],[-1,"    this.getIntDirection = function(){\n\n    }\n"],[0,"    "]],"start1":1498,"start2":1498,"length1":54,"length2":8}]],"length":4254,"saved":false}
