{"ts":1375820070840,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n\nfunction Map(sizeX, sizeY){\n    this.tileSize = 8;\n    this.size = {x:sizeX/this.tileSize, y:sizeY/this.tileSize};\n    this.tiles = {};\n    this.map = [];\n    this.spriteSheet = null;\n    this.spriteSheet8x8 = null;\n    this.postDrawTiles = [];\n    this.postDrawIndexes = [];\n    this.collisionInstance = null;    \n    \n    this.checkInvisibleColliders = false;\n    this.invisibleColliders = [];\n    this.baseCollidersRef = [];\n    this.drawingHouse = false;\n    //this.tilesInstance = null;\n\n    // should be called after the building phase\n    this.DoneBuilding = function(){\n            // create the borders\n            this.drawCols([\"GRAY\"], 0,1,36,37,38,39);\n            this.drawRows([\"GRAY\"], 0,29);\n\n            // put the code to build the player general base (flag)\n            this.drawingHouse = true;\n            this.drawIntervals('V', [\"BRICK\"], [17,20], [27,28]);\n            this.drawIntervals('H', [\"BRICK\"], [26], [17,20]);\n            this.drawingHouse = false;\n            /*\n            this.baseCollidersRef.push([17*2,26*2,\"BRICK\"], [17*2,27*2,\"BRICK\"], [17*2,28*2,\"BRICK\"],\n                                       [20,26,\"BRICK\"], [20,27,\"BRICK\"], [20,28,\"BRICK\"],\n                                   aw    [18,26,\"BRICK\"], [19,26,\"BRICK\"]);\n            */\n            this.createColliderForTiles();\n    }\n\n\n\n    this.enableSolidBase = function(time){\n        for (var i in this.baseCollidersRef){\n            var col = this.baseCollidersRef[i];\n            this.removeTile(col[0],col[1]);\n            this.map[col[0]][col[1]] = \"STEEL\";\n            var tile = this.tiles[\"STEEL\"];\n            this.collisionInstance.createStaticCollider({obj:this, type:\"tile\", subtype:tile.name, x:col[1], y:col[0], tile:tile}, {x:col[1]*this.tileSize,y:col[0]*this.tileSize, w:tile.size.x,h:tile.size.y}, \n                                                        this.defaultCollision);\n            //console.log(col[0], col[1], this.map[col[0]][col[1]]);\n            //this.collisionInstance.modifyStaticCollider(col[0], col[1], col[2], [\"type\", \"STEEL\"]);\n        }\n\n        setTimeout((function(self) {            //Self-executing func which takes 'this' as self\n                         return function() {    //Return a function in the context of 'self'                             \n                             self.disableSolidBase(); \n                         };\n                     })(this),\n                     time );\n    }\n\n    this.disableSolidBase = function(){\n        for (var i in this.baseCollidersRef){\n            var col = this.baseCollidersRef[i];\n            this.removeTile(col[0],col[1]);\n            var tile = this.tiles[\"BRICK\"];\n            tile.putItselfInMap(this.map, col[0], col[1]);\n\n\n            //this.collisionInstance.createStaticCollider({obj:this, type:\"tile\", subtype:tile.name, x:col[1], y:col[0], tile:tile}, {x:col[1]*this.tileSize,y:col[0]*this.tileSize, w:tile.size.x,h:tile.size.y}, \n                                                        //this.defaultCollision);\n        }\n\n        this.createColliderForTiles();\n    }\n\n    this.removeTile = function(y,x){\n        //console.log(this.map[y][x]);\n        this.map[y][x]     = \"NONE\"\n        this.map[y+1][x]   = \"NONE\";\n        this.map[y][x+1]   = \"NONE\";\n        this.map[y+1][x+1] = \"NONE\";\n\n        this.removeCollider(x,y,\"tile\");\n        this.removeCollider(x+1,y,\"tile\");\n        this.removeCollider(x,y+1,\"tile\");\n        this.removeCollider(x+1,y+1,\"tile\");\n\n        this.checkInvisibleColliders = true;\n    }\n    \n    this.setSpriteSheets = function(ss){\n        this.spriteSheet = ss;\n    }\n\n    this.setCollisionInstance = function(col){\n        this.collisionInstance = col;\n    }\n\n    this.createTile = function(){\n        for (var v in arguments){\n            var tile = arguments[v];\n            for (var sub in tile.subTiles){\n                this.tiles[tile.subTiles[sub]] = tile;\n            }\n            this.tiles[tile.name] = tile;\n            if (tile.postRendered)\n                this.addPostDrawTile(tile.name);\n                \n        }\n    };\n    \n    this.setTilesInstance = function(instance){\n        this.tilesInstance = instance;\n    }\n    \n    // fill entire rows with tile\n    this.drawRows = function(tile){\n        var i=tile.length;\n        for (var row in arguments){\n            if (row<1) continue;\n            row = arguments[row]*2;\n            for (var pos=0; pos<this.map[row].length; pos+=2){  \n                var t = this.tiles[tile[i++%tile.length]];\n                if (t!=null){\n                    t.putItselfInMap(this.map,row,pos);\n                } else {\n                    console.log (\"tile not found\", t);\n                }                    \n            }\n        }\n    };\n    \n    // fill entire columns with tile\n    this.drawCols = function(tile){\n        var i=tile.length;\n        for (var col in arguments){\n            if (col<1) continue;\n            col = arguments[col]*2;\n            for (var pos=0; pos<this.map.length; pos+=2){\n                var t = this.tiles[tile[i++%tile.length]];\n                if (t!=null){\n                    t.putItselfInMap(this.map, pos, col);\n                } else {\n                    console.log (\"tile not found\", t);\n                }   \n            }\n        }\n    };\n    \n    // line defined as [1,2], [6,10], \n    //H to fill horizontal, V to fill vertical\n    this.drawIntervals = function(dir, tile, pos){\n        var len=tile.length;        \n        for (var i in arguments){\n            if (i<3) continue;\n            s = arguments[i][0]*2; e = arguments[i][1]*2;\n            for (var p in pos){\n                p = pos[p]*2;\n                for (var r=s; r<=e; r+=2){\n                    var t = this.tiles[tile[len%tile.length]];\n                    if (t!=null){\n                        if (dir=='H'){\n                            t.putItselfInMap(this.map, p, r);\n                            if (this.drawingHouse) this.baseCollidersRef.push([p,r,\"BRICK\"]);\n                        }else if (dir=='V') {\n                            t.putItselfInMap(this.map, r, p);\n                            if (this.drawingHouse) this.baseCollidersRef.push([r,p,\"BRICK\"]);\n                        }\n                    }\n                }\n            }\n            len++;\n        }        \n    };\n    \n    // fill a rectangle with tile\n    // rect [x,y, widht, height]\n    this.drawRects = function(tile){ \n        var len = tile.length;\n        for (var i in arguments){\n            if (i<1) continue;\n            var x1 = arguments[i][0]*2; var y1 = arguments[i][1]*2;\n            var x2 = arguments[i][2]*2; var y2 = arguments[i][3]*2;\n            for (var m=0; m<x2; m+=2){\n                for (var n=0; n<y2; n+=2){\n                     var t = this.tiles[tile[len%tile.length]];\n                     if (t!=null)\n                        t.putItselfInMap(this.map, y1+n, x1+m);\n                }\n            }\n        }\n        len++\n    }\n    \n    // can draw different pattern of blocks at x,y pos --> [ [BRICK, ..., SNOW], [WATER,...,SNOW], ... ]\n    this.drawPattern = function(tile,y,x){\n        var current_x = x*2;\n        var current_y = y*2;\n        for (var i in tile){\n            tline = tile[i];            \n            for (var j in tline ){      \n                var t = this.tiles[tline[j]];\n                if (t){\n                    t.putItselfInMap(this.map, current_y, current_x);\n                    current_x+=2;\n                }\n            }\n            current_y+=2;\n            current_x = x*2;\n        }\n    };\n\n    this.setTile = function (tile,y,x){\n        this.map[y][x] = tile;\n    }\n\n    this.createMap = function (){\n        this.map = newArray(this.size.y,[]);\n        for (var line in this.map){\n            this.map[line] = newArray(this.size.x,\"NONE\");\n        }\n    };\n    \n    //this.setEnumTiles = function(args){\n    //    this.enumTiles = args;    \n    //    this.createMap();\n    //}\n    \n    this.addPostDrawTile = function(tile){\n        this.postDrawTiles.push(tile);\n    };\n    \n    this.drawMap = function(context){\n        this.postDrawIndexes = []; //fill this in here because the map can dinamically change in the future\n        \n        //deal with invisible colliders (this is true only when a map tile is destroyed)\n        if (this.checkInvisibleColliders){\n            for (var i = this.invisibleColliders.length-1; i>=0; i--){\n                var invCol = this.invisibleColliders[i];\n                \n                if (this.isAroundSquareOfSameType(\"NONE\",invCol.x, invCol.y) || \n                    this.map[invCol.y][invCol.x] === \"STEEL\") {\n                    //console.log(\"inv\", \"x:\",invCol.x, \"y:\",invCol.y);\n                    this.collisionInstance.removeStaticCollider(invCol.x, invCol.y, \"invisible\");\n                    this.invisibleColliders.splice(i,1);\n                }\n            }\n            this.checkInvisibleColliders = false;\n        }        \n        \n        for(var y=0; y<this.size.y; y+=1){\n            for (var x=0; x<this.size.x; x+=1){\n                    if (contains(this.postDrawTiles, this.map[y][x])){\n                        this.postDrawIndexes.push([y,x]);\n                        continue;\n                    }\n                    var tile = this.tiles[this.map[y][x]];\n                    if (tile != null){\n                        //console.log(tile.size);\n                        context.image(this.getSpriteAt(x,y) , x*this.tileSize, y*this.tileSize);\n                    } else {\n                        //console.log(this.map[y][x]);\n                    }\n                  \n            }\n        }\n    };\n    \n    this.postDrawMap = function(context){\n        //console.log(this.postDrawIndexes);\n        for (var o in this.postDrawIndexes ){\n            x = this.postDrawIndexes[o][1];\n            y = this.postDrawIndexes[o][0];\n            context.image(map1.getSpriteAt(x,y) , x*map1.tileSize, y*map1.tileSize);\n        }\n    };\n    \n    this.getSpriteAt = function (x,y){\n        return this.spriteSheet.getSprite(this.map[y][x]);\n    };\n    \n    this.createColliderForTiles = function(){\n        for(var i=0; i<this.size.y; i+=1){\n            for (var j=0; j<this.size.x; j+=1){\n                var tile = this.tiles[this.map[i][j]];\n                if (this.collisionInstance.existsStaticCollider(j,i,\"tile\")){\n                    continue;\n                }\n                if (tile != null && tile.hasCollider){\n                        this.collisionInstance.createStaticCollider({obj:this, type:\"tile\", subtype:tile.name, x:j, y:i, tile:tile}, {x:j*this.tileSize,y:i*this.tileSize, w:tile.size.x,h:tile.size.y}, \n                                                        this.defaultCollision);\n                }\n                if (tile != null && tile.drawInvisibleCollider(this.map[i][j])){\n                        this.collisionInstance.createStaticCollider({obj:this, type:\"invisible\", x:j, y:i}, {x:j*this.tileSize, y:i*this.tileSize, w:16,h:16}, function(info,other){});\n                        this.invisibleColliders.push({x:j,y:i}); \n                }\n            }\n        }      \n    };\n    \n    this.removeCollider = function(x,y, type){\n        if (this.collisionInstance) {\n            this.collisionInstance.removeStaticCollider(x,y, type);\n        }\n    };\n    \n    this.defaultCollision = function(info,other){\n        var self = info.obj;\n        if (other.type === \"explosion\"){\n            if (info.tile.isBreakable || (other.obj.breakSteel && info.subtype==\"STEEL\")){               \n                self.removeCollider(info.x, info.y, \"tile\");\n                //console.log(\"map\", \"x:\", info.x, \"y:\",info.y);\n                self.map[info.y][info.x] = \"NONE\";                \n                //a block was destroyed, mark map check for invisible colliders\n                self.checkInvisibleColliders = true;\n                //if (self.isAroundSquareOfSameType(\"NONE\", info.x, info.y);\n            }\n        }\n    };\n\n    this.isAroundSquareOfSameType = function(type, x,y){\n        return (this.map[y][x] === type && this.map[y+1][x] === type && this.map[y][x+1] === type && this.map[y+1][x+1] === type);\n    };\n\n   \n    \n    \n}"]],"start1":0,"start2":0,"length1":0,"length2":12203}]],"length":12203}
{"contributors":[],"silentsave":false,"ts":1375825756121,"patch":[[{"diffs":[[0,"\"], 0,1,"],[1,"2,3,"],[0,"36,37,38"]],"start1":646,"start2":646,"length1":16,"length2":20}]],"length":12207,"saved":false}
{"ts":1375825802169,"patch":[[{"diffs":[[0,"0,1,2,3,"],[1," 34,35,"],[0,"36,37,38"]],"start1":650,"start2":650,"length1":16,"length2":23}]],"length":12214,"saved":false}
{"ts":1375825844715,"patch":[[{"diffs":[[0,"0,1,2,3,"],[-1," "],[1,"4,5 32,33,"],[0,"34,35,36"]],"start1":650,"start2":650,"length1":17,"length2":26}]],"length":12223,"saved":false}
{"ts":1375825860266,"patch":[[{"diffs":[[0,",2,3,4,5"],[1,","],[0," 32,33,3"]],"start1":653,"start2":653,"length1":16,"length2":17}]],"length":12224,"saved":false}
{"ts":1375825912904,"patch":[[{"diffs":[[0,"AY\"], 0,"],[1,"1,28,"],[0,"29);\n\n  "]],"start1":719,"start2":719,"length1":16,"length2":21}]],"length":12229,"saved":false}
{"ts":1375825996964,"patch":[[{"diffs":[[0,"CK\"], [1"],[-1,"7,20"],[1,"5,18"],[0,"], [27,2"]],"start1":885,"start2":885,"length1":20,"length2":20}]],"length":12229,"saved":false}
{"ts":1375826012339,"patch":[[{"diffs":[[0,", [1"],[-1,"5,18"],[1,"7,20"],[0,"], ["]],"start1":889,"start2":889,"length1":12,"length2":12}]],"length":12229,"saved":false}
{"ts":1375826018949,"patch":[[{"diffs":[[0,"CK\"], [1"],[-1,"7,20"],[1,"5,18"],[0,"], [27,2"]],"start1":885,"start2":885,"length1":20,"length2":20}]],"length":12229,"saved":false}
{"ts":1375826045514,"patch":[[{"diffs":[[0,", [2"],[-1,"7,28"],[1,"5,26"],[0,"]);\n"]],"start1":898,"start2":898,"length1":12,"length2":12}]],"length":12229,"saved":false}
{"ts":1375826067716,"patch":[[{"diffs":[[0,", [1"],[-1,"5,18"],[1,"7,20"],[0,"], [2"],[-1,"5,26"],[1,"7,28"],[0,"]);\n"]],"start1":889,"start2":889,"length1":21,"length2":21}]],"length":12229,"saved":false}
{"ts":1375826125954,"patch":[[{"diffs":[[0,", [2"],[-1,"7,28"],[1,"5,26"],[0,"]);\n"]],"start1":898,"start2":898,"length1":12,"length2":12}]],"length":12229,"saved":false}
{"ts":1375826147136,"patch":[[{"diffs":[[0,", [2"],[-1,"5,26"],[1,"6,27"],[0,"]);\n"]],"start1":898,"start2":898,"length1":12,"length2":12},{"diffs":[[0,"CK\"], [2"],[-1,"6"],[1,"5"],[0,"], [17,2"]],"start1":951,"start2":951,"length1":17,"length2":17}]],"length":12229,"saved":false}
{"ts":1375826328960,"patch":[[{"diffs":[[0,"2,3,"],[-1,"4,5, "],[1,"30,31,"],[0,"32,3"]],"start1":654,"start2":654,"length1":13,"length2":14}]],"length":12230,"saved":false}
{"ts":1375826376426,"patch":[[{"diffs":[[0,"CK\"], [1"],[-1,"7,20"],[1,"5,18"],[0,"], [26,2"]],"start1":886,"start2":886,"length1":20,"length2":20}]],"length":12230,"saved":false}
{"ts":1375826382295,"patch":[[{"diffs":[[0,", [1"],[-1,"7,20"],[1,"5,18"],[0,"]);\n"]],"start1":962,"start2":962,"length1":12,"length2":12}]],"length":12230,"saved":false}
{"ts":1375828519943,"patch":[[{"diffs":[[1,"stages = []"],[0,"\n\nfuncti"]],"start1":0,"start2":0,"length1":8,"length2":19}]],"length":12241,"saved":false}
{"ts":1375828521637,"patch":[[{"diffs":[[0,"s = []\n\n"],[1,"\n"],[0,"function"]],"start1":5,"start2":5,"length1":16,"length2":17}]],"length":12242,"saved":false}
{"ts":1375828544881,"patch":[[{"diffs":[[-1,"stages = []"],[0,"\n\n\nf"]],"start1":0,"start2":0,"length1":15,"length2":4},{"diffs":[[0," null;  "],[1,"\n"],[0,"  "],[1,"  this.currentMap = 0;"],[0,"\n    \n  "]],"start1":307,"start2":307,"length1":18,"length2":41}]],"length":12254,"saved":false}
{"ts":1375828561797,"patch":[[{"diffs":[[0,"\n    }\n\n"],[1,"    this.loadMap(){\n        \n    }"],[0,"\n\n    th"]],"start1":1377,"start2":1377,"length1":16,"length2":50}]],"length":12288,"saved":false}
{"ts":1375828565144,"patch":[[{"diffs":[[0,".loadMap"],[1," = function"],[0,"(){\n    "]],"start1":1393,"start2":1393,"length1":16,"length2":27}]],"length":12299,"saved":false}
{"ts":1375828658692,"patch":[[{"diffs":[[0,"dMap = function("],[1,"num"],[0,"){\n        \n    "]],"start1":1397,"start2":1397,"length1":32,"length2":35}]],"length":12302,"saved":false}
{"ts":1375828704474,"patch":[[{"diffs":[[0,"unction("],[-1,"num"],[0,"){\n     "]],"start1":1405,"start2":1405,"length1":19,"length2":16}]],"length":12299,"saved":false}
{"ts":1375828735295,"patch":[[{"diffs":[[0,"){\n        \n"],[1,"        var data = stage[currentMap].data;\n"],[0,"    }\n\n    t"]],"start1":1413,"start2":1413,"length1":24,"length2":67}]],"length":12342,"saved":false}
{"ts":1375828808706,"patch":[[{"diffs":[[0,"ion(){\n        \n"],[1,"        this.createMap();\n"],[0,"        var data"]],"start1":1409,"start2":1409,"length1":32,"length2":58},{"diffs":[[0,"entMap]."],[-1,"data"],[1,"layers"],[0,";\n    }\n"]],"start1":1480,"start2":1480,"length1":20,"length2":22}]],"length":12370,"saved":false}
{"ts":1375828813389,"patch":[[{"diffs":[[0,"ap = function(){"],[-1,"\n"],[0,"        \n       "]],"start1":1399,"start2":1399,"length1":33,"length2":32}]],"length":12369,"saved":false}
{"ts":1375828879275,"patch":[[{"diffs":[[0,"ap = 0;\n"],[1,"    this.borders = {left:4, right:\n"],[0,"    \n   "]],"start1":333,"start2":333,"length1":16,"length2":51},{"diffs":[[0,"0,1,2,3,"],[1," "],[0,"30,31,32"]],"start1":709,"start2":709,"length1":16,"length2":17}]],"length":12405,"saved":false}
{"ts":1375828892528,"patch":[[{"diffs":[[0,", right:"],[1,"10, "],[0,"\n    \n  "]],"start1":367,"start2":367,"length1":16,"length2":20}]],"length":12409,"saved":false}
{"ts":1375828900303,"patch":[[{"diffs":[[0,"ght:10, "],[1,"top:2, bottom:2};"],[0,"\n    \n  "]],"start1":371,"start2":371,"length1":16,"length2":33}]],"length":12426,"saved":false}
{"ts":1375828961129,"patch":[[{"diffs":[[0,"layers;\n"],[1,"        \n        for (var x=this.borders.left; x)\n"],[0,"    }\n\n "]],"start1":1544,"start2":1544,"length1":16,"length2":66}]],"length":12476,"saved":false}
{"ts":1375828988274,"patch":[[{"diffs":[[0,".left; x"],[1,"< this.size.x-this.borders.right; x+=2 "],[0,")\n    }\n"]],"start1":1592,"start2":1592,"length1":16,"length2":55}]],"length":12515,"saved":false}
{"ts":1375828995312,"patch":[[{"diffs":[[0,"; x+=2 )"],[1,"{\n            \n        }"],[0,"\n    }\n\n"]],"start1":1632,"start2":1632,"length1":16,"length2":40}]],"length":12539,"saved":false}
{"ts":1375829046757,"patch":[[{"diffs":[[0," ){\n            "],[1,"for (var y=this.borders.top; y<this.size.y-this.borders.down; y+=2){\n                \n            }"],[0,"\n        }\n    }"]],"start1":1638,"start2":1638,"length1":32,"length2":131}]],"length":12638,"saved":false}
{"ts":1375829053727,"patch":[[{"diffs":[[0,"left; x<"],[-1," "],[0,"this.siz"]],"start1":1593,"start2":1593,"length1":17,"length2":16}]],"length":12637,"saved":false}
{"ts":1375829063274,"patch":[[{"diffs":[[0,"ers."],[-1,"down"],[1,"bottom"],[0,"; y+"]],"start1":1705,"start2":1705,"length1":12,"length2":14}]],"length":12639,"saved":false}
{"ts":1375829120145,"patch":[[{"diffs":[[0,"        "],[-1,"    "],[0,"// creat"]],"start1":660,"start2":660,"length1":20,"length2":16},{"diffs":[[0,"the borders\n"],[-1,"    "],[0,"        this"]],"start1":678,"start2":678,"length1":28,"length2":24},{"diffs":[[0,"38,39);\n        "],[-1,"    "],[0,"this.drawRows([\""]],"start1":755,"start2":755,"length1":36,"length2":32},{"diffs":[[0,"        "],[-1,"  "],[-1,"  "],[0,"// put t"]],"start1":808,"start2":808,"length1":20,"length2":16},{"diffs":[[0," (flag)\n        "],[-1,"    "],[0,"this.drawingHous"]],"start1":864,"start2":864,"length1":36,"length2":32},{"diffs":[[0,"= true;\n        "],[-1," "],[-1,"   "],[0,"this.drawInterva"]],"start1":898,"start2":898,"length1":36,"length2":32},{"diffs":[[0,", [26,27]);\n"],[-1,"    "],[0,"        this"]],"start1":956,"start2":956,"length1":28,"length2":24},{"diffs":[[0,"]);\n        "],[-1,"    "],[0,"this.drawing"]],"start1":1023,"start2":1023,"length1":28,"length2":24},{"diffs":[[0,"    "],[-1,"    /*\n    "],[1,"/*\n"],[0,"    "]],"start1":1066,"start2":1066,"length1":19,"length2":11},{"diffs":[[0,"        "],[-1,"  "],[-1,"  "],[0,"[20,26,\""]],"start1":1198,"start2":1198,"length1":20,"length2":16},{"diffs":[[0,"        "],[-1,"    "],[0,"aw    [1"]],"start1":1280,"start2":1280,"length1":20,"length2":16},{"diffs":[[0,"    "],[-1,"    */\n    "],[1,"*/\n"],[0,"    "]],"start1":1333,"start2":1333,"length1":19,"length2":11}]],"length":12583,"saved":false}
{"ts":1375829261470,"patch":[[{"diffs":[[0,"\n"],[1,"tileNames = [\"NONE\",\"BRICK\",\"STEEL\",\"GRASS\",\"WATER\",\"WATER\",\"SNOW\",\"GRAY\"];"],[0,"\n\nfuncti"]],"start1":0,"start2":0,"length1":9,"length2":84}]],"length":12658,"saved":false}
{"ts":1375829361252,"patch":[[{"diffs":[[0,"                "],[1,"var tile = data[(y-this.borders.top)*width+(x+this.borders.left)]"],[0,"\n            }\n "]],"start1":1743,"start2":1743,"length1":32,"length2":97}]],"length":12723,"saved":false}
{"ts":1375829378501,"patch":[[{"diffs":[[0,"].layers"],[1,"[0]"],[0,";\n      "]],"start1":1561,"start2":1561,"length1":16,"length2":19}]],"length":12726,"saved":false}
{"ts":1375829415208,"patch":[[{"diffs":[[0,"    var "],[-1,"data"],[1,"layer"],[0," = stage"]],"start1":1530,"start2":1530,"length1":20,"length2":21}]],"length":12727,"saved":false}
{"ts":1375829430628,"patch":[[{"diffs":[[0," tile = "],[1,"layer."],[0,"data[(y-"]],"start1":1766,"start2":1766,"length1":16,"length2":22}]],"length":12733,"saved":false}
{"ts":1375829460319,"patch":[[{"diffs":[[0," tile = "],[1,"tileNames["],[0,"layer.da"]],"start1":1766,"start2":1766,"length1":16,"length2":26},{"diffs":[[0,"s.left)]"],[1,"-1];"],[0,"\n       "]],"start1":1836,"start2":1836,"length1":16,"length2":20}]],"length":12747,"saved":false}
{"ts":1375829516663,"patch":[[{"diffs":[[0,"rs.top)*"],[1,"layer."],[0,"width+(x"]],"start1":1808,"start2":1808,"length1":16,"length2":22}]],"length":12753,"saved":false}
{"ts":1375829535908,"patch":[[{"diffs":[[0,".layers[0];\n"],[1,"        console.log(layer);\n"],[0,"        \n   "]],"start1":1563,"start2":1563,"length1":24,"length2":52}]],"length":12781,"saved":false}
{"ts":1375829586834,"patch":[[{"diffs":[[0," = stage"],[1,"s"],[0,"[current"]],"start1":1543,"start2":1543,"length1":16,"length2":17}]],"length":12782,"saved":false}
{"ts":1375829641162,"patch":[[{"diffs":[[0," stages["],[1,"this."],[0,"currentM"]],"start1":1545,"start2":1545,"length1":16,"length2":21}]],"length":12787,"saved":false}
{"ts":1375829679219,"patch":[[{"diffs":[[0,"ers[0];\n        "],[1,"//"],[0,"console.log(laye"]],"start1":1573,"start2":1573,"length1":32,"length2":34}]],"length":12789,"saved":false}
{"ts":1375829684916,"patch":[[{"diffs":[[0,".left)]-1];\n"],[1,"                \n                \n"],[0,"            "]],"start1":1879,"start2":1879,"length1":24,"length2":58}]],"length":12823,"saved":false}
{"ts":1375829702831,"patch":[[{"diffs":[[0,".data[(y"],[1,"/2"],[0,"-this.bo"]],"start1":1825,"start2":1825,"length1":16,"length2":18},{"diffs":[[0,"width+(x"],[1,"/2"],[0,"+this.bo"]],"start1":1860,"start2":1860,"length1":16,"length2":18}]],"length":12827,"saved":false}
{"ts":1375829823158,"patch":[[{"diffs":[[0,"               \n"],[1,"                 tile.putItselfInMap(this.map, y, x);\n"],[0,"                "]],"start1":1896,"start2":1896,"length1":32,"length2":86}]],"length":12881,"saved":false}
{"ts":1375829826763,"patch":[[{"diffs":[[0,"                "],[-1," "],[0,"tile.putItselfIn"]],"start1":1912,"start2":1912,"length1":33,"length2":32}]],"length":12880,"saved":false}
{"ts":1375829846004,"patch":[[{"diffs":[[0,"tom; y+=2){\n"],[1,"                console.log(layer.data[(y/2-this.borders.top)*layer.width+(x/2+this.borders.left)]-1);\n"],[0,"            "]],"start1":1771,"start2":1771,"length1":24,"length2":127}]],"length":12983,"saved":false}
{"ts":1375829880047,"patch":[[{"diffs":[[0,"ata["],[-1,"(y/2-this.borders.top)*layer.width+(x/2+this.borders.left)]-1"],[1,"0]"],[0,");\n "]],"start1":1818,"start2":1818,"length1":69,"length2":10}]],"length":12924,"saved":false}
{"ts":1375829942263,"patch":[[{"diffs":[[0,"log("],[-1,"layer.data[0]"],[1," (y/2-this.borders.top)*layer.width+(x/2+this.borders.left)-1"],[0,");\n "]],"start1":1807,"start2":1807,"length1":21,"length2":69}]],"length":12972,"saved":false}
{"ts":1375830013622,"patch":[[{"diffs":[[0,"ers.left"],[1,"*2"],[0,"; x<this"]],"start1":1648,"start2":1648,"length1":16,"length2":18},{"diffs":[[0,"rs.right"],[1,"*2"],[0,"; x+=2 )"]],"start1":1684,"start2":1684,"length1":16,"length2":18},{"diffs":[[0,"ders.top"],[1,"*2"],[0,"; y<this"]],"start1":1735,"start2":1735,"length1":16,"length2":18},{"diffs":[[0,"s.bottom"],[1,"*2"],[0,"; y+=2){"]],"start1":1772,"start2":1772,"length1":16,"length2":18}]],"length":12980,"saved":false}
{"ts":1375830083153,"patch":[[{"diffs":[[0,"ayer.width+(x/2+"],[-1,"t"],[1,"-"],[0,"his.borders.left"]],"start1":1844,"start2":1844,"length1":33,"length2":33},{"diffs":[[0,"                "],[1,"//"],[0,"var tile = tileN"]],"start1":1883,"start2":1883,"length1":32,"length2":34},{"diffs":[[0,"                "],[1,"//"],[0,"tile.putItselfIn"]],"start1":2014,"start2":2014,"length1":32,"length2":34}]],"length":12984,"saved":false}
{"ts":1375830085745,"patch":[[{"diffs":[[0,"(x/2"],[-1,"+"],[0,"-"],[1,"t"],[0,"his."]],"start1":1855,"start2":1855,"length1":10,"length2":10}]],"length":12984,"saved":false}
{"ts":1375830103073,"patch":[[{"diffs":[[0,"rs.left)"],[-1,"-1"],[0,");\n     "]],"start1":1870,"start2":1870,"length1":18,"length2":16}]],"length":12982,"saved":false}
{"ts":1375830158360,"patch":[[{"diffs":[[0,"ayer);\n        \n"],[1,"        var currentPos = 0;\n"],[0,"        for (var"]],"start1":1604,"start2":1604,"length1":32,"length2":60}]],"length":13010,"saved":false}
{"ts":1375830169419,"patch":[[{"diffs":[[0,"log("],[-1," (y/2-this.borders.top)*layer.width+(x/2-this.borders.left)"],[0,");\n "]],"start1":1843,"start2":1843,"length1":67,"length2":8},{"diffs":[[0,"        "],[-1,"//"],[0,"var tile"]],"start1":1858,"start2":1858,"length1":18,"length2":16}]],"length":12949,"saved":false}
{"ts":1375830176549,"patch":[[{"diffs":[[0,"ata["],[-1,"(y/2-this.borders.top)*layer.width+(x/2+this.borders.left)"],[1,"currentPos++"],[0,"]-1]"]],"start1":1894,"start2":1894,"length1":66,"length2":20}]],"length":12903,"saved":false}
{"ts":1375830186887,"patch":[[{"diffs":[[0,"ole.log("],[1,"layer.data[currentPos++]-1"],[0,");\n     "]],"start1":1839,"start2":1839,"length1":16,"length2":42}]],"length":12929,"saved":false}
{"ts":1375830220782,"patch":[[{"diffs":[[0,"                "],[1,"//"],[0,"console.log(laye"]],"start1":1819,"start2":1819,"length1":32,"length2":34}]],"length":12931,"saved":false}
{"ts":1375830223334,"patch":[[{"diffs":[[0,"     }\n    }"],[1,"\n    \n    layer.data[currentPos++]-1"],[0,"\n\n    this.e"]],"start1":2050,"start2":2050,"length1":24,"length2":60}]],"length":12967,"saved":false}
{"ts":1375830242339,"patch":[[{"diffs":[[0,"    "],[-1,"}\n"],[0,"    "],[-1,"\n    layer.data[currentPos++]-1"],[1,"console.log(currentPos);\n    }\n    \n"],[0,"\n\n  "]],"start1":2057,"start2":2057,"length1":45,"length2":48}]],"length":12970,"saved":false}
{"ts":1375830257316,"patch":[[{"diffs":[[0,"ole.log("],[1,"layer, "],[0,"currentP"]],"start1":2069,"start2":2069,"length1":16,"length2":23}]],"length":12977,"saved":false}
{"ts":1375830312686,"patch":[[{"diffs":[[0,"        "],[-1,"//"],[0,"tile.put"]],"start1":1969,"start2":1969,"length1":18,"length2":16},{"diffs":[[0,"      }\n        "],[1,"//"],[0,"console.log(laye"]],"start1":2047,"start2":2047,"length1":32,"length2":34}]],"length":12977,"saved":false}
{"ts":1375830339402,"patch":[[{"diffs":[[0,"               \n"],[1,"                if (tile.name !==\"NONE\")\n    "],[0,"                "]],"start1":1945,"start2":1945,"length1":32,"length2":77}]],"length":13022,"saved":false}
{"ts":1375830366775,"patch":[[{"diffs":[[0,"if (tile"],[-1,".name"],[0," !==\"NON"]],"start1":1977,"start2":1977,"length1":21,"length2":16}]],"length":13017,"saved":false}
{"ts":1375830386425,"patch":[[{"diffs":[[0," var tile = "],[1,"tiles["],[0,"tileNames[la"]],"start1":1893,"start2":1893,"length1":24,"length2":30},{"diffs":[[0,"os++]-1]"],[1,"]"],[0,";\n      "]],"start1":1940,"start2":1940,"length1":16,"length2":17}]],"length":13024,"saved":false}
{"ts":1375830392930,"patch":[[{"diffs":[[0,"e !="],[-1,"=\"NONE\""],[1," null"],[0,")\n  "]],"start1":1991,"start2":1991,"length1":15,"length2":13}]],"length":13022,"saved":false}
{"ts":1375830406806,"patch":[[{"diffs":[[0," var tile = "],[1,"this."],[0,"tiles[tileNa"]],"start1":1893,"start2":1893,"length1":24,"length2":29}]],"length":13027,"saved":false}
{"ts":1375830426175,"patch":[[{"diffs":[[0,"    }\n        }\n"],[1,"        \n        this.DoneBuilding();\n"],[0,"        //consol"]],"start1":2089,"start2":2089,"length1":32,"length2":70}]],"length":13065,"saved":false}
{"ts":1375830444144,"patch":[[{"diffs":[[0,"ap, "],[-1,"y, x"],[1,"x, y"],[0,");\n "]],"start1":2053,"start2":2053,"length1":12,"length2":12}]],"length":13065,"saved":false}
{"ts":1375830477495,"patch":[[{"diffs":[[0,"ap, "],[-1,"x, y"],[1,"y, x"],[0,");\n "]],"start1":2053,"start2":2053,"length1":12,"length2":12}]],"length":13065,"saved":false}
{"ts":1375830586843,"patch":[[{"diffs":[[0,"borders."],[-1,"left"],[1,"top"],[0,"*2; x<th"]],"start1":1672,"start2":1672,"length1":20,"length2":19},{"diffs":[[0,"borders."],[-1,"right"],[1,"b"],[0,"*2; x+=2"]],"start1":1706,"start2":1706,"length1":21,"length2":17},{"diffs":[[0,"his.borders."],[-1,"top"],[1,"left"],[0,"*2; y<this.s"]],"start1":1751,"start2":1751,"length1":27,"length2":28}]],"length":13061,"saved":false}
{"ts":1375830588710,"patch":[[{"diffs":[[0,"orders.b"],[1,"ottom"],[0,"*2; x+=2"]],"start1":1707,"start2":1707,"length1":16,"length2":21}]],"length":13066,"saved":false}
{"ts":1375830591949,"patch":[[{"diffs":[[0,"his.borders."],[-1,"bottom"],[1,"right"],[0,"*2; y+=2){\n "]],"start1":1791,"start2":1791,"length1":30,"length2":29}]],"length":13065,"saved":false}
{"ts":1375830606361,"patch":[[{"diffs":[[0,"ap, "],[-1,"y, x"],[1,"x,y"],[0,");\n "]],"start1":2053,"start2":2053,"length1":12,"length2":11}]],"length":13064,"saved":false}
{"ts":1375830627806,"patch":[[{"diffs":[[0,"borders."],[-1,"top"],[1,"left"],[0,"*2; x<th"]],"start1":1672,"start2":1672,"length1":19,"length2":20},{"diffs":[[0,"borders."],[-1,"bottom"],[1,"right"],[0,"*2; x+=2"]],"start1":1707,"start2":1707,"length1":22,"length2":21},{"diffs":[[0,"his.borders."],[-1,"left"],[1,"top"],[0,"*2; y<this.s"]],"start1":1756,"start2":1756,"length1":28,"length2":27},{"diffs":[[0,"his.borders."],[-1,"right"],[1,"bottom"],[0,"*2; y+=2){\n "]],"start1":1790,"start2":1790,"length1":29,"length2":30},{"diffs":[[0,"is.map, "],[-1,"x,y"],[1,"y, x"],[0,");\n     "]],"start1":2049,"start2":2049,"length1":19,"length2":20},{"diffs":[[0,"Building();\n"],[1,"\n"],[0,"        //co"]],"start1":2131,"start2":2131,"length1":24,"length2":25}]],"length":13066,"saved":false}
{"ts":1375830629668,"patch":[[{"diffs":[[0,"ding();\n"],[-1,"\n"],[0,"        "]],"start1":2135,"start2":2135,"length1":17,"length2":16}]],"length":13065,"saved":false}
{"ts":1375830643583,"patch":[[{"diffs":[[0,"ap, "],[-1,"y, x"],[1,"x, y"],[0,");\n "]],"start1":2053,"start2":2053,"length1":12,"length2":12}]],"length":13065,"saved":false}
{"ts":1375830788766,"patch":[[{"diffs":[[0,"or (var "],[-1,"x"],[1,"y"],[0,"=this.bo"]],"start1":1657,"start2":1657,"length1":17,"length2":17},{"diffs":[[0,"ers."],[-1,"left"],[1,"top"],[0,"*2; "],[-1,"x"],[1,"y"],[0,"<thi"]],"start1":1676,"start2":1676,"length1":17,"length2":16},{"diffs":[[0,"is.size."],[-1,"x"],[1,"y"],[0,"-this.bo"]],"start1":1691,"start2":1691,"length1":17,"length2":17},{"diffs":[[0,"ers."],[-1,"right"],[1,"bottom"],[0,"*2; "],[-1,"x"],[1,"y"],[0,"+=2"],[-1," "],[0,"){\n "]],"start1":1710,"start2":1710,"length1":22,"length2":22},{"diffs":[[0,"       for (var "],[-1,"y"],[1,"x"],[0,"=this.borders.to"]],"start1":1736,"start2":1736,"length1":33,"length2":33},{"diffs":[[0,"his.borders."],[-1,"top"],[1,"left"],[0,"*2; "],[-1,"y"],[1,"x"],[0,"<this.size.y"]],"start1":1755,"start2":1755,"length1":32,"length2":33},{"diffs":[[0,"*2; x<this.size."],[-1,"y"],[1,"x"],[0,"-this.borders.bo"]],"start1":1771,"start2":1771,"length1":33,"length2":33},{"diffs":[[0,"his.borders."],[-1,"bottom"],[1,"right"],[0,"*2; "],[-1,"y"],[1,"x"],[0,"+=2"],[1," "],[0,"){\n         "]],"start1":1790,"start2":1790,"length1":38,"length2":38}]],"length":13065,"saved":false}
{"ts":1375830792502,"patch":[[{"diffs":[[0,"ap, "],[-1,"x, y"],[1,"y,x"],[0,");\n "]],"start1":2053,"start2":2053,"length1":12,"length2":11}]],"length":13064,"saved":false}
{"ts":1375833019326,"patch":[[{"diffs":[[0,"++]-1]];"],[-1,"\n"],[0,"        "]],"start1":1947,"start2":1947,"length1":17,"length2":16},{"diffs":[[0,"p, y,x);"],[-1,"\n"],[0,"        "]],"start1":2053,"start2":2053,"length1":17,"length2":16},{"diffs":[[0,"();\n"],[-1,"        //console.log(layer, currentPos);\n"],[0,"    "]],"start1":2136,"start2":2136,"length1":50,"length2":8}]],"length":13020,"saved":false}
{"ts":1375833031369,"patch":[[{"diffs":[[0,"0];\n"],[-1,"        //console.log(layer);\n"],[0,"    "]],"start1":1577,"start2":1577,"length1":38,"length2":8}]],"length":12990,"saved":false}
{"ts":1375833336086,"patch":[[{"diffs":[[0,"tom:2};\n"],[1,"    this.enemySpawnerInstance;\n"],[0,"    \n   "]],"start1":464,"start2":464,"length1":16,"length2":47}]],"length":13021,"saved":false}
{"ts":1375833381296,"patch":[[{"diffs":[[0,".layers[0];\n"],[1,"        this.enemySpawnerInstance.addEnemyList(layers.enemies);\n"],[0,"        \n   "]],"start1":1600,"start2":1600,"length1":24,"length2":88}]],"length":13085,"saved":false}
{"ts":1375833413484,"patch":[[{"diffs":[[0," null;\n\n"],[1,"    this.setEnemySpawnerInstance = function(esi){\n        this.enemySpawnerInstance = esi;\n    }\n"],[0,"    // s"]],"start1":673,"start2":673,"length1":16,"length2":113}]],"length":13182,"saved":false}
{"ts":1375833898777,"patch":[[{"diffs":[[0,"st(layer"],[-1,"s"],[0,".enemies"]],"start1":1753,"start2":1753,"length1":17,"length2":16}]],"length":13181,"saved":false}
{"ts":1375833933830,"patch":[[{"diffs":[[0,"emyList("],[-1,"layer"],[1,"stages[this.currentMap]"],[0,".enemies"]],"start1":1748,"start2":1748,"length1":21,"length2":39}]],"length":13199,"saved":false}
{"ts":1375845120502,"patch":[[{"diffs":[[0,"ntMap = "],[-1,"0"],[1,"-1"],[0,";\n    th"]],"start1":405,"start2":405,"length1":17,"length2":18}]],"length":13200,"saved":false}
{"ts":1375845823347,"patch":[[{"diffs":[[0,".enemies"],[1,".slice(0)"],[0,");\n     "]],"start1":1780,"start2":1780,"length1":16,"length2":25}]],"length":13209,"saved":false}
{"ts":1375845827715,"patch":[[{"diffs":[[0,"ice(0));"],[1,"//clone"],[0,"\n       "]],"start1":1791,"start2":1791,"length1":16,"length2":23}]],"length":13216,"saved":false}
