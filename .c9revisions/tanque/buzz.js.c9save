{"ts":1377287803329,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1," // ----------------------------------------------------------------------------\n // Buzz, a Javascript HTML5 Audio library\n // v1.1.0 - released 2013-08-15 13:18\n // Licensed under the MIT license.\n // http://buzz.jaysalvat.com/\n // ----------------------------------------------------------------------------\n // Copyright (C) 2010-2013 Jay Salvat\n // http://jaysalvat.com/\n // ----------------------------------------------------------------------------\n\n(function(name, context, factory) {\n    if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = factory();\n    } else if (typeof context.define === \"function\" && context.define.amd) {\n        define(name, [], factory);\n    } else {\n        context[name] = factory();\n    }\n})(\"buzz\", this, function() {\n    var buzz = {\n        defaults: {\n            autoplay: false,\n            duration: 5e3,\n            formats: [],\n            loop: false,\n            placeholder: \"--\",\n            preload: \"metadata\",\n            volume: 80,\n            document: document\n        },\n        types: {\n            mp3: \"audio/mpeg\",\n            ogg: \"audio/ogg\",\n            wav: \"audio/wav\",\n            aac: \"audio/aac\",\n            m4a: \"audio/x-m4a\"\n        },\n        sounds: [],\n        el: document.createElement(\"audio\"),\n        sound: function(src, options) {\n            options = options || {};\n            var doc = options.document || buzz.defaults.document;\n            var pid = 0, events = [], eventsOnce = {}, supported = buzz.isSupported();\n            this.load = function() {\n                if (!supported) {\n                    return this;\n                }\n                this.sound.load();\n                return this;\n            };\n            this.play = function() {\n                if (!supported) {\n                    return this;\n                }\n                this.sound.play();\n                return this;\n            };\n            this.togglePlay = function() {\n                if (!supported) {\n                    return this;\n                }\n                if (this.sound.paused) {\n                    this.sound.play();\n                } else {\n                    this.sound.pause();\n                }\n                return this;\n            };\n            this.pause = function() {\n                if (!supported) {\n                    return this;\n                }\n                this.sound.pause();\n                return this;\n            };\n            this.isPaused = function() {\n                if (!supported) {\n                    return null;\n                }\n                return this.sound.paused;\n            };\n            this.stop = function() {\n                if (!supported) {\n                    return this;\n                }\n                this.setTime(0);\n                this.sound.pause();\n                return this;\n            };\n            this.isEnded = function() {\n                if (!supported) {\n                    return null;\n                }\n                return this.sound.ended;\n            };\n            this.loop = function() {\n                if (!supported) {\n                    return this;\n                }\n                this.sound.loop = \"loop\";\n                this.bind(\"ended.buzzloop\", function() {\n                    this.currentTime = 0;\n                    this.play();\n                });\n                return this;\n            };\n            this.unloop = function() {\n                if (!supported) {\n                    return this;\n                }\n                this.sound.removeAttribute(\"loop\");\n                this.unbind(\"ended.buzzloop\");\n                return this;\n            };\n            this.mute = function() {\n                if (!supported) {\n                    return this;\n                }\n                this.sound.muted = true;\n                return this;\n            };\n            this.unmute = function() {\n                if (!supported) {\n                    return this;\n                }\n                this.sound.muted = false;\n                return this;\n            };\n            this.toggleMute = function() {\n                if (!supported) {\n                    return this;\n                }\n                this.sound.muted = !this.sound.muted;\n                return this;\n            };\n            this.isMuted = function() {\n                if (!supported) {\n                    return null;\n                }\n                return this.sound.muted;\n            };\n            this.setVolume = function(volume) {\n                if (!supported) {\n                    return this;\n                }\n                if (volume < 0) {\n                    volume = 0;\n                }\n                if (volume > 100) {\n                    volume = 100;\n                }\n                this.volume = volume;\n                this.sound.volume = volume / 100;\n                return this;\n            };\n            this.getVolume = function() {\n                if (!supported) {\n                    return this;\n                }\n                return this.volume;\n            };\n            this.increaseVolume = function(value) {\n                return this.setVolume(this.volume + (value || 1));\n            };\n            this.decreaseVolume = function(value) {\n                return this.setVolume(this.volume - (value || 1));\n            };\n            this.setTime = function(time) {\n                if (!supported) {\n                    return this;\n                }\n                var set = true;\n                this.whenReady(function() {\n                    if (set === true) {\n                        set = false;\n                        this.sound.currentTime = time;\n                    }\n                });\n                return this;\n            };\n            this.getTime = function() {\n                if (!supported) {\n                    return null;\n                }\n                var time = Math.round(this.sound.currentTime * 100) / 100;\n                return isNaN(time) ? buzz.defaults.placeholder : time;\n            };\n            this.setPercent = function(percent) {\n                if (!supported) {\n                    return this;\n                }\n                return this.setTime(buzz.fromPercent(percent, this.sound.duration));\n            };\n            this.getPercent = function() {\n                if (!supported) {\n                    return null;\n                }\n                var percent = Math.round(buzz.toPercent(this.sound.currentTime, this.sound.duration));\n                return isNaN(percent) ? buzz.defaults.placeholder : percent;\n            };\n            this.setSpeed = function(duration) {\n                if (!supported) {\n                    return this;\n                }\n                this.sound.playbackRate = duration;\n                return this;\n            };\n            this.getSpeed = function() {\n                if (!supported) {\n                    return null;\n                }\n                return this.sound.playbackRate;\n            };\n            this.getDuration = function() {\n                if (!supported) {\n                    return null;\n                }\n                var duration = Math.round(this.sound.duration * 100) / 100;\n                return isNaN(duration) ? buzz.defaults.placeholder : duration;\n            };\n            this.getPlayed = function() {\n                if (!supported) {\n                    return null;\n                }\n                return timerangeToArray(this.sound.played);\n            };\n            this.getBuffered = function() {\n                if (!supported) {\n                    return null;\n                }\n                return timerangeToArray(this.sound.buffered);\n            };\n            this.getSeekable = function() {\n                if (!supported) {\n                    return null;\n                }\n                return timerangeToArray(this.sound.seekable);\n            };\n            this.getErrorCode = function() {\n                if (supported && this.sound.error) {\n                    return this.sound.error.code;\n                }\n                return 0;\n            };\n            this.getErrorMessage = function() {\n                if (!supported) {\n                    return null;\n                }\n                switch (this.getErrorCode()) {\n                  case 1:\n                    return \"MEDIA_ERR_ABORTED\";\n\n                  case 2:\n                    return \"MEDIA_ERR_NETWORK\";\n\n                  case 3:\n                    return \"MEDIA_ERR_DECODE\";\n\n                  case 4:\n                    return \"MEDIA_ERR_SRC_NOT_SUPPORTED\";\n\n                  default:\n                    return null;\n                }\n            };\n            this.getStateCode = function() {\n                if (!supported) {\n                    return null;\n                }\n                return this.sound.readyState;\n            };\n            this.getStateMessage = function() {\n                if (!supported) {\n                    return null;\n                }\n                switch (this.getStateCode()) {\n                  case 0:\n                    return \"HAVE_NOTHING\";\n\n                  case 1:\n                    return \"HAVE_METADATA\";\n\n                  case 2:\n                    return \"HAVE_CURRENT_DATA\";\n\n                  case 3:\n                    return \"HAVE_FUTURE_DATA\";\n\n                  case 4:\n                    return \"HAVE_ENOUGH_DATA\";\n\n                  default:\n                    return null;\n                }\n            };\n            this.getNetworkStateCode = function() {\n                if (!supported) {\n                    return null;\n                }\n                return this.sound.networkState;\n            };\n            this.getNetworkStateMessage = function() {\n                if (!supported) {\n                    return null;\n                }\n                switch (this.getNetworkStateCode()) {\n                  case 0:\n                    return \"NETWORK_EMPTY\";\n\n                  case 1:\n                    return \"NETWORK_IDLE\";\n\n                  case 2:\n                    return \"NETWORK_LOADING\";\n\n                  case 3:\n                    return \"NETWORK_NO_SOURCE\";\n\n                  default:\n                    return null;\n                }\n            };\n            this.set = function(key, value) {\n                if (!supported) {\n                    return this;\n                }\n                this.sound[key] = value;\n                return this;\n            };\n            this.get = function(key) {\n                if (!supported) {\n                    return null;\n                }\n                return key ? this.sound[key] : this.sound;\n            };\n            this.bind = function(types, func) {\n                if (!supported) {\n                    return this;\n                }\n                types = types.split(\" \");\n                var self = this, efunc = function(e) {\n                    func.call(self, e);\n                };\n                for (var t = 0; t < types.length; t++) {\n                    var type = types[t], idx = type;\n                    type = idx.split(\".\")[0];\n                    events.push({\n                        idx: idx,\n                        func: efunc\n                    });\n                    this.sound.addEventListener(type, efunc, true);\n                }\n                return this;\n            };\n            this.unbind = function(types) {\n                if (!supported) {\n                    return this;\n                }\n                types = types.split(\" \");\n                for (var t = 0; t < types.length; t++) {\n                    var idx = types[t], type = idx.split(\".\")[0];\n                    for (var i = 0; i < events.length; i++) {\n                        var namespace = events[i].idx.split(\".\");\n                        if (events[i].idx == idx || namespace[1] && namespace[1] == idx.replace(\".\", \"\")) {\n                            this.sound.removeEventListener(type, events[i].func, true);\n                            events.splice(i, 1);\n                        }\n                    }\n                }\n                return this;\n            };\n            this.bindOnce = function(type, func) {\n                if (!supported) {\n                    return this;\n                }\n                var self = this;\n                eventsOnce[pid++] = false;\n                this.bind(type + \".\" + pid, function() {\n                    if (!eventsOnce[pid]) {\n                        eventsOnce[pid] = true;\n                        func.call(self);\n                    }\n                    self.unbind(type + \".\" + pid);\n                });\n                return this;\n            };\n            this.trigger = function(types) {\n                if (!supported) {\n                    return this;\n                }\n                types = types.split(\" \");\n                for (var t = 0; t < types.length; t++) {\n                    var idx = types[t];\n                    for (var i = 0; i < events.length; i++) {\n                        var eventType = events[i].idx.split(\".\");\n                        if (events[i].idx == idx || eventType[0] && eventType[0] == idx.replace(\".\", \"\")) {\n                            var evt = doc.createEvent(\"HTMLEvents\");\n                            evt.initEvent(eventType[0], false, true);\n                            this.sound.dispatchEvent(evt);\n                        }\n                    }\n                }\n                return this;\n            };\n            this.fadeTo = function(to, duration, callback) {\n                if (!supported) {\n                    return this;\n                }\n                if (duration instanceof Function) {\n                    callback = duration;\n                    duration = buzz.defaults.duration;\n                } else {\n                    duration = duration || buzz.defaults.duration;\n                }\n                var from = this.volume, delay = duration / Math.abs(from - to), self = this;\n                this.play();\n                function doFade() {\n                    setTimeout(function() {\n                        if (from < to && self.volume < to) {\n                            self.setVolume(self.volume += 1);\n                            doFade();\n                        } else if (from > to && self.volume > to) {\n                            self.setVolume(self.volume -= 1);\n                            doFade();\n                        } else if (callback instanceof Function) {\n                            callback.apply(self);\n                        }\n                    }, delay);\n                }\n                this.whenReady(function() {\n                    doFade();\n                });\n                return this;\n            };\n            this.fadeIn = function(duration, callback) {\n                if (!supported) {\n                    return this;\n                }\n                return this.setVolume(0).fadeTo(100, duration, callback);\n            };\n            this.fadeOut = function(duration, callback) {\n                if (!supported) {\n                    return this;\n                }\n                return this.fadeTo(0, duration, callback);\n            };\n            this.fadeWith = function(sound, duration) {\n                if (!supported) {\n                    return this;\n                }\n                this.fadeOut(duration, function() {\n                    this.stop();\n                });\n                sound.play().fadeIn(duration);\n                return this;\n            };\n            this.whenReady = function(func) {\n                if (!supported) {\n                    return null;\n                }\n                var self = this;\n                if (this.sound.readyState === 0) {\n                    this.bind(\"canplay.buzzwhenready\", function() {\n                        func.call(self);\n                    });\n                } else {\n                    func.call(self);\n                }\n            };\n            function timerangeToArray(timeRange) {\n                var array = [], length = timeRange.length - 1;\n                for (var i = 0; i <= length; i++) {\n                    array.push({\n                        start: timeRange.start(i),\n                        end: timeRange.end(i)\n                    });\n                }\n                return array;\n            }\n            function getExt(filename) {\n                return filename.split(\".\").pop();\n            }\n            function addSource(sound, src) {\n                var source = doc.createElement(\"source\");\n                source.src = src;\n                if (buzz.types[getExt(src)]) {\n                    source.type = buzz.types[getExt(src)];\n                }\n                sound.appendChild(source);\n            }\n            if (supported && src) {\n                for (var i in buzz.defaults) {\n                    if (buzz.defaults.hasOwnProperty(i)) {\n                        options[i] = options[i] || buzz.defaults[i];\n                    }\n                }\n                this.sound = doc.createElement(\"audio\");\n                if (src instanceof Array) {\n                    for (var j in src) {\n                        if (src.hasOwnProperty(j)) {\n                            addSource(this.sound, src[j]);\n                        }\n                    }\n                } else if (options.formats.length) {\n                    for (var k in options.formats) {\n                        if (options.formats.hasOwnProperty(k)) {\n                            addSource(this.sound, src + \".\" + options.formats[k]);\n                        }\n                    }\n                } else {\n                    addSource(this.sound, src);\n                }\n                if (options.loop) {\n                    this.loop();\n                }\n                if (options.autoplay) {\n                    this.sound.autoplay = \"autoplay\";\n                }\n                if (options.preload === true) {\n                    this.sound.preload = \"auto\";\n                } else if (options.preload === false) {\n                    this.sound.preload = \"none\";\n                } else {\n                    this.sound.preload = options.preload;\n                }\n                this.setVolume(options.volume);\n                buzz.sounds.push(this);\n            }\n        },\n        group: function(sounds) {\n            sounds = argsToArray(sounds, arguments);\n            this.getSounds = function() {\n                return sounds;\n            };\n            this.add = function(soundArray) {\n                soundArray = argsToArray(soundArray, arguments);\n                for (var a = 0; a < soundArray.length; a++) {\n                    sounds.push(soundArray[a]);\n                }\n            };\n            this.remove = function(soundArray) {\n                soundArray = argsToArray(soundArray, arguments);\n                for (var a = 0; a < soundArray.length; a++) {\n                    for (var i = 0; i < sounds.length; i++) {\n                        if (sounds[i] == soundArray[a]) {\n                            sounds.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            };\n            this.load = function() {\n                fn(\"load\");\n                return this;\n            };\n            this.play = function() {\n                fn(\"play\");\n                return this;\n            };\n            this.togglePlay = function() {\n                fn(\"togglePlay\");\n                return this;\n            };\n            this.pause = function(time) {\n                fn(\"pause\", time);\n                return this;\n            };\n            this.stop = function() {\n                fn(\"stop\");\n                return this;\n            };\n            this.mute = function() {\n                fn(\"mute\");\n                return this;\n            };\n            this.unmute = function() {\n                fn(\"unmute\");\n                return this;\n            };\n            this.toggleMute = function() {\n                fn(\"toggleMute\");\n                return this;\n            };\n            this.setVolume = function(volume) {\n                fn(\"setVolume\", volume);\n                return this;\n            };\n            this.increaseVolume = function(value) {\n                fn(\"increaseVolume\", value);\n                return this;\n            };\n            this.decreaseVolume = function(value) {\n                fn(\"decreaseVolume\", value);\n                return this;\n            };\n            this.loop = function() {\n                fn(\"loop\");\n                return this;\n            };\n            this.unloop = function() {\n                fn(\"unloop\");\n                return this;\n            };\n            this.setTime = function(time) {\n                fn(\"setTime\", time);\n                return this;\n            };\n            this.set = function(key, value) {\n                fn(\"set\", key, value);\n                return this;\n            };\n            this.bind = function(type, func) {\n                fn(\"bind\", type, func);\n                return this;\n            };\n            this.unbind = function(type) {\n                fn(\"unbind\", type);\n                return this;\n            };\n            this.bindOnce = function(type, func) {\n                fn(\"bindOnce\", type, func);\n                return this;\n            };\n            this.trigger = function(type) {\n                fn(\"trigger\", type);\n                return this;\n            };\n            this.fade = function(from, to, duration, callback) {\n                fn(\"fade\", from, to, duration, callback);\n                return this;\n            };\n            this.fadeIn = function(duration, callback) {\n                fn(\"fadeIn\", duration, callback);\n                return this;\n            };\n            this.fadeOut = function(duration, callback) {\n                fn(\"fadeOut\", duration, callback);\n                return this;\n            };\n            function fn() {\n                var args = argsToArray(null, arguments), func = args.shift();\n                for (var i = 0; i < sounds.length; i++) {\n                    sounds[i][func].apply(sounds[i], args);\n                }\n            }\n            function argsToArray(array, args) {\n                return array instanceof Array ? array : Array.prototype.slice.call(args);\n            }\n        },\n        all: function() {\n            return new buzz.group(buzz.sounds);\n        },\n        isSupported: function() {\n            return !!buzz.el.canPlayType;\n        },\n        isOGGSupported: function() {\n            return !!buzz.el.canPlayType && buzz.el.canPlayType('audio/ogg; codecs=\"vorbis\"');\n        },\n        isWAVSupported: function() {\n            return !!buzz.el.canPlayType && buzz.el.canPlayType('audio/wav; codecs=\"1\"');\n        },\n        isMP3Supported: function() {\n            return !!buzz.el.canPlayType && buzz.el.canPlayType(\"audio/mpeg;\");\n        },\n        isAACSupported: function() {\n            return !!buzz.el.canPlayType && (buzz.el.canPlayType(\"audio/x-m4a;\") || buzz.el.canPlayType(\"audio/aac;\"));\n        },\n        toTimer: function(time, withHours) {\n            var h, m, s;\n            h = Math.floor(time / 3600);\n            h = isNaN(h) ? \"--\" : h >= 10 ? h : \"0\" + h;\n            m = withHours ? Math.floor(time / 60 % 60) : Math.floor(time / 60);\n            m = isNaN(m) ? \"--\" : m >= 10 ? m : \"0\" + m;\n            s = Math.floor(time % 60);\n            s = isNaN(s) ? \"--\" : s >= 10 ? s : \"0\" + s;\n            return withHours ? h + \":\" + m + \":\" + s : m + \":\" + s;\n        },\n        fromTimer: function(time) {\n            var splits = time.toString().split(\":\");\n            if (splits && splits.length == 3) {\n                time = parseInt(splits[0], 10) * 3600 + parseInt(splits[1], 10) * 60 + parseInt(splits[2], 10);\n            }\n            if (splits && splits.length == 2) {\n                time = parseInt(splits[0], 10) * 60 + parseInt(splits[1], 10);\n            }\n            return time;\n        },\n        toPercent: function(value, total, decimal) {\n            var r = Math.pow(10, decimal || 0);\n            return Math.round(value * 100 / total * r) / r;\n        },\n        fromPercent: function(percent, total, decimal) {\n            var r = Math.pow(10, decimal || 0);\n            return Math.round(total / 100 * percent * r) / r;\n        }\n    };\n    return buzz;\n});"]],"start1":0,"start2":0,"length1":0,"length2":24648}]],"length":24648}
