{"ts":1375851279951,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\nfunction Collision(){\n    this.staticColliders = [];\n    this.dynamicColliders = [];\n    \n    this.createDynamicCollider = function(info,callback, offsetX, offsetY){\n        offsetX = offsetX || 0;\n        offsetY = offsetY || 0;\n        info[\"offx\"] = offsetX;\n        info[\"offy\"] = offsetY;\n        this.dynamicColliders.push({\"i\":info, \"func\":callback});\n    }\n    \n    this.createStaticCollider = function(info,rect,callback){\n        this.staticColliders.push({\"i\":info, \"r\":rect, \"func\":callback});\n    }\n\n\n    \n    this.removeDynamicCollider = function( obj ){\n        for (var i=0; i< this.dynamicColliders.length; i++)\n            if (obj === this.dynamicColliders[i].i.obj){\n                this.dynamicColliders.splice(i,1);\n                break;\n            }\n    }\n    \n    // the position is the id that defines a Static Collider\n    this.removeStaticCollider = function( x,y , type){\n         for (var i=this.staticColliders.length-1; i>=0 ; i--){\n            if (x === this.staticColliders[i].i.x && y === this.staticColliders[i].i.y && this.staticColliders[i].i.type === type){\n                this.staticColliders.splice(i,1);  \n                //console.log(\"found collider\");\n            }\n         }\n    };\n\n    this.existsStaticCollider = function(x,y,type){\n        for (var i=this.staticColliders.length-1; i>=0 ; i--){\n            if (x === this.staticColliders[i].i.x && y === this.staticColliders[i].i.y && this.staticColliders[i].i.type === type){\n                return true;\n            }\n         }\n\n         return false;\n    }\n\n    // change the pairs [attr,value] of the collider\n    this.modifyStaticCollider = function( x,y, type){\n        var collider = null;\n        //find collider\n        for (var i=this.staticColliders.length-1; i>=0 ; i--){\n            if (x === this.staticColliders[i].i.x && y === this.staticColliders[i].i.y && this.staticColliders[i].i.type === type){\n                collider = this.staticColliders[i];\n            }\n        }\n        // change attribute values\n        if (collider !== null){\n            for (var arg in arguments){\n                if (arg<3) continue;\n                var attr = arguments[arg][0];\n                var value = arguments[arg][1];\n\n                //console.log(x,y, attr, value);\n\n                if (collider.i.hasAttribute(attr))\n                    collider.i[attr] = value;\n            }\n        }\n    };\n    \n    this.computeCollisions = function(){\n        //collision between static and dynamic colliders\n        for (var dc=this.dynamicColliders.length-1; dc>=0; dc-- ){\n            var dcol = this.dynamicColliders[dc];\n            for (var i=this.staticColliders.length-1; i>=0; i--) {\n                scol = this.staticColliders[i];\n                if (!scol) continue;\n                dobj = dcol.i.obj;                \n                rect = {x:(dobj.pos.x+dcol.i.offx), y:(dobj.pos.y+dcol.i.offy), w:dcol.i.w, h:dcol.i.h };\n                if (this.overlap(rect,scol.r)){\n                    dcol.func(dcol.i, scol.i);\n                    scol.func(scol.i,dcol.i);\n                }\n            }\n            \n            //collision between dynamic collider\n            for (var dc2=this.dynamicColliders.length-1; dc2>=0; dc2-- ){\n                 dcol2 = this.dynamicColliders[dc2];\n                 if (dcol2 === dcol) continue;\n                 dobj = dcol.i.obj;\n                 dobj2 = dcol2.i.obj;\n                 rect = {x:(dobj.pos.x+dobj.currentSpeed.x + dcol.i.offx), y:(dobj.pos.y+dobj.currentSpeed.y + dcol.i.offy), w:dcol.i.w, h:dcol.i.h };\n                 rect2 = {x:(dobj2.pos.x+dobj2.currentSpeed.x + dcol2.i.offx), y:(dobj2.pos.y+dobj2.currentSpeed.y + dcol2.i.offy), w:dcol2.i.w, h:dcol2.i.h };\n                 if (this.overlap(rect,rect2)){\n                    dcol.func(dcol.i,dcol2.i);\n                    dcol2.func(dcol2.i,dcol.i);\n                 }\n                 \n            }\n            //console.log(col.info);\n            //col.func(col.i);\n        }\n    }\n    \n    //CHECK OVERLAP RECTANGLES\n    this.overlap = function(rectA, rectB){\n        xoverlap = this.valueInRange(rectA.x, rectB.x, rectB.x + rectB.w ) ||\n                   this.valueInRange(rectB.x, rectA.x, rectA.x + rectA.w);\n        \n        yoverlap = this.valueInRange(rectA.y, rectB.y, rectB.y + rectB.h) ||\n                   this.valueInRange(rectB.y, rectA.y, rectA.y + rectA.h);\n                   \n        return xoverlap && yoverlap;\n        \n    }\n    \n    this.valueInRange = function(value,min,max){\n        return (value >= min) && (value < max);\n    }\n    \n    // function to help debug collision\n    this.drawAllColliders = function(context){\n        context.noFill();\n        context.stroke(204, 102, 0);\n        for (var dcol in this.dynamicColliders){\n            dcol = this.dynamicColliders[dcol];\n            context.rect(dcol.i.obj.pos.x + dcol.i.offx , dcol.i.obj.pos.y + dcol.i.offy, dcol.i.w, dcol.i.h );\n        }\n        \n        context.stroke(102, 204, 0);\n        \n        for (var scol in this.staticColliders){\n            scol = this.staticColliders[scol];\n            context.rect(scol.r.x , scol.r.y, scol.r.w, scol.r.h );\n        }\n        \n    }\n    \n    /*\n    this.tilesWithCollider = [];\n    this.collider = {x:0,y:0,sizex:0,sizey:0};\n    \n    this.createMapColliders = function(map){\n        for (var i in map){\n            mapline = map[i];\n            for (j in mapline){\n                \n            }\n            \n        }\n    }\n    this.checkCollision = function (x,y){\n        \n    }\n    */\n}"]],"start1":0,"start2":0,"length1":0,"length2":5559}]],"length":5559}
{"contributors":[],"silentsave":false,"ts":1375851293712,"patch":[[{"diffs":[[0,"\n    }\n\n"],[1,"    this.clearStaticColliders = function(){\n        this\n    }\n"],[0,"\n    \n  "]],"start1":506,"start2":506,"length1":16,"length2":79}]],"length":5622,"saved":false}
{"ts":1375851307186,"patch":[[{"diffs":[[0,"    this"],[1,".staticColliders = [];"],[0,"\n    }\n\n"]],"start1":562,"start2":562,"length1":16,"length2":38}]],"length":5644,"saved":false}
{"ts":1375851320500,"patch":[[{"diffs":[[0,"is.clear"],[-1,"Static"],[0,"Collider"]],"start1":520,"start2":520,"length1":22,"length2":16}]],"length":5638,"saved":false}
{"ts":1375851330741,"patch":[[{"diffs":[[0,"iders = [];\n"],[1,"        this.dynamicColliders = [];\n"],[0,"    }\n\n    \n"]],"start1":575,"start2":575,"length1":24,"length2":60}]],"length":5674,"saved":false}
{"ts":1375851343947,"patch":[[{"diffs":[[0,"[];\n"],[-1,"        this.dynamicColliders = [];\n"],[0,"    "]],"start1":583,"start2":583,"length1":44,"length2":8}]],"length":5638,"saved":false}
{"ts":1375851363583,"patch":[[{"diffs":[[0,"is.clear"],[1,"Static"],[0,"Collider"]],"start1":520,"start2":520,"length1":16,"length2":22}]],"length":5644,"saved":false}
{"ts":1375851368651,"patch":[[{"diffs":[[0,"rStaticColliders"],[1,"OfType"],[0," = function(){\n "]],"start1":527,"start2":527,"length1":32,"length2":38}]],"length":5650,"saved":false}
{"ts":1375851430038,"patch":[[{"diffs":[[0,"e = function(){\n"],[1,"        for (var i in arguments){\n    "],[0,"        this.sta"]],"start1":548,"start2":548,"length1":32,"length2":70},{"diffs":[[0,"iders = [];\n"],[1,"        }\n"],[0,"    }\n\n    \n"]],"start1":625,"start2":625,"length1":24,"length2":34}]],"length":5698,"saved":false}
{"ts":1375851438973,"patch":[[{"diffs":[[0," in arguments){\n"],[1,"            i = arguments[i];\n"],[0,"            this"]],"start1":582,"start2":582,"length1":32,"length2":62}]],"length":5728,"saved":false}
{"ts":1375851501642,"patch":[[{"diffs":[[0,"guments[i];\n"],[1,"            for (var j=this.staticColliders.length-1; j>=0; j--){\n                if (this.staticColliders[j]){\n                    \n                }\n            }\n"],[0,"            "]],"start1":616,"start2":616,"length1":24,"length2":189}]],"length":5893,"saved":false}
{"ts":1375851516291,"patch":[[{"diffs":[[0,"iders[j]"],[1,".type === i"],[0,"){\n     "]],"start1":729,"start2":729,"length1":16,"length2":27},{"diffs":[[0,"                "],[1," this.staticColliders = [];"],[0,"\n               "]],"start1":755,"start2":755,"length1":32,"length2":59},{"diffs":[[0,"    "],[-1," this.staticColliders = [];"],[0,"\n   "]],"start1":838,"start2":838,"length1":35,"length2":8}]],"length":5904,"saved":false}
{"ts":1375851528284,"patch":[[{"diffs":[[0,"ticColliders"],[-1," = []"],[1,".splice(j,1)"],[0,";\n          "]],"start1":780,"start2":780,"length1":29,"length2":36}]],"length":5911,"saved":false}
{"ts":1375851548090,"patch":[[{"diffs":[[0,"ders[j]."],[1,"i."],[0,"type ==="]],"start1":730,"start2":730,"length1":16,"length2":18}]],"length":5913,"saved":false}
{"ts":1375851569156,"patch":[[{"diffs":[[0," }\n            }"],[-1,"\n"],[0,"           \n    "]],"start1":823,"start2":823,"length1":33,"length2":32}]],"length":5912,"saved":false}
