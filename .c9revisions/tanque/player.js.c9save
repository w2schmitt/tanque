{"ts":1375633962865,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"function Player(){\n    \n    this.pos = {x:16*6, y:16*6};\n    this.spawningPos = {x:16*6, y:16*6};\n    this.posPrevious = {x:0,y:0};\n    this.lives = 1;\n    this.maxLives = 1; // when lives pass the max lives the tank die (done this way to use the value lives in the animation)\n    this.speed = 2;\n    this.bulletSpeed = 7;\n    this.type = \"player\";\n    this.subtype = 1;\n    this.subsubtype = \"\"; // this tank carries an item\n    this.currentSpeed = {x:0,y:0};\n    this.input = {};\n    this.spriteSheet = null;\n    this.bulletSpriteSheet = null;\n    this.explosionSpritesheet = null; //eitcha lele\n    this.bigExplosionSpritesheet = null;  \n    this.spawnSpriteSheet = null;\n    this.currentSprite = null;\n    this.shieldSprite = null;\n    this.direction = {Up:\"Up\",Right:\"Right\",Down:\"Down\",Left:\"Left\"};//fazendo dessa forma pq com o enum n tem garantia q vai ser string, e o nome dos sprites pode mudar no futuro\n    this.animationContext = null;\n    //this.shieldAnimContext = null;\n    this.currentDirection = this.direction.Up;\n    this.currentCollisionFunc = this.defaultCollision;\n    this.fireCooldownTime = 0.5*1000; //in miliseconds\n    this.spawnTime = 1.5*1000; // in ms\n    this.spawning = false;\n    this.isShielded = false;\n    this.ignore = [];\n    this.isDead = false;\n    this.spawnerInstance = null;\n    this.itemSpanwerInstance = null;\n    //this.bornTogether = false;\n    //this.shieldTime = 1*1000; // in ms\n    \n    this.firstUpdate = true;\n    this.maxBullets = 1;\n    this.canFire = true;\n    this.bullets = [];\n    \n    this.collisionInstance = null;\n    \n    this.setItemSpawner = function(is){\n        this.itemSpanwerInstance = is;\n    }\n    \n    this.setInput = function(input){\n        this.input = input;\n    };\n    \n    this.spawnPlayer = function(){\n        this.pos = {x: this.spawningPos.x, y: this.spawningPos.y};\n        this.posPrevious = {x: this.spawningPos.x, y:this.spawningPos.y};\n        this.currentSpeed = {x:0,y:0};\n        \n        this.spawning = true;\n        setTimeout((function(self) {            //Self-executing func which takes 'this' as self\n                         return function() {    //Return a function in the context of 'self'\n                             self.spawning = false;\n                             if (self.type === \"player\") self.setShieldOn(1*3000);\n                             if (self.subsubtype === \"special\") self.itemSpanwerInstance.clearItems();\n                         };\n                     })(this),\n                     this.spawnTime );\n    }\n    \n    this.setShieldOn = function(time){\n        this.isShielded = true;\n        setTimeout((function(self) {         //Self-executing func which takes 'this' as self\n                         return function() {   //Return a function in the context of 'self'\n                             self.isShielded = false;\n                         };\n                     })(this),\n                     time );\n        \n    }\n    \n    //called each draw frame\n    this.update = function(){\n        \n        if (this.firstUpdate){\n            this.spawnPlayer();\n            this.firstUpdate = false;\n            //return false;\n        }\n        \n        if (this.spawning) {\n            this.currentSprite = this.spawnSpriteSheet.getSprite(\"spawn\");            \n        } else if (this.isDead){\n            \n        } else {     \n            if (this.isShielded){\n                this.shieldSprite = this.spriteSheet.getSprite(\"shield\");\n            } else {\n                this.shieldSprite = null;\n            }\n\n            for (var i=this.ignore.length-1; i>=0; i--){\n                var p = this.ignore[i];        \n                var pos = {x:(this.pos.x+16), y:(this.pos.y+16)}; // get the center pos\n                var pos2 = {x:(p.pos.x+16), y:(p.pos.y+16)};\n                if (Math.pow(pos.x-pos2.x,2) + Math.pow(pos.y-pos2.y,2) > 35*35){ //for not using sqrt\n                    this.ignore.splice(i,1);\n                }\n            }\n        \n            var gridSize =16;\n            this.currentSpeed.x = 0;\n            this.currentSpeed.y = 0;\n            \n            this.posPrevious.x = this.pos.x;\n            this.posPrevious.y = this.pos.y;\n                \n            //eu nao consegui gravar porque isso aqui funcionou:\n            if (this.input.value.x !== 0 ){\n                //this.pos.x += this.input.value.x*this.speed; \n                this.currentSpeed.x = this.input.value.x*this.speed;\n                this.pos.x +=  this.currentSpeed.x;\n                if (this.input.value.x > 0) this.currentDirection = this.direction.Right; else this.currentDirection = this.direction.Left;\n                 //put him back on the grid:\n                this.pos.y = Math.round((this.pos.y )/gridSize)*gridSize;\n            }else if (this.input.value.y !== 0){\n                //this.pos.y += this.input.value.y*this.speed;\n                this.currentSpeed.y = this.input.value.y*this.speed;\n                this.pos.y +=  this.currentSpeed.y;\n                if (this.input.value.y > 0) this.currentDirection = this.direction.Down; else this.currentDirection = this.direction.Up;\n                //put him back on the grid:\n                this.pos.x = Math.round((this.pos.x )/gridSize)*gridSize;\n            } \n            \n            // instantiate bullet\n            if (this.input.value.fire === true && this.bullets.length < this.maxBullets && this.canFire){\n                //console.log(\"Shooting\");\n                if (this.bulletSpriteSheet){\n                    this.canFire = false;\n                    var bulletSprite = this.bulletSpriteSheet.getSprite(\"bullet\"+this.currentDirection);\n                    var newbullet = new Bullet(this.pos.x +gridSize/2, this.pos.y +gridSize/2, bulletSprite);\n                   \n                    newbullet.currentDirection = this.currentDirection;\n                    newbullet.bulletSpeed = this.bulletSpeed;\n                    newbullet.calculateSpeed();\n                    newbullet.owner = this;\n                    this.bullets.push(newbullet);\n                    this.collisionInstance.createDynamicCollider({obj:newbullet, type:newbullet.type ,w:16,h:16}, newbullet.defaultCollision);\n                    //relaoding:\n                \n                    setTimeout((function(self) {         //Self-executing func which takes 'this' as self\n                                     return function() {   //Return a function in the context of 'self'\n                                         self.fireCoolDown(); //Thing you wanted to run as non-window 'this'\n                                     };\n                                 })(this),\n                                 this.fireCooldownTime );\n                    \n                }\n            }\n            \n            if (this.spriteSheet){ \n                if (this.animationContext === null){\n                    this.animationContext = this.spriteSheet.createContext(); \n                }\n                //console.log(this.spriteSheet.getSprite(\"player\"+this.currentDirection,this.animationContext));\n                this.currentSprite = this.spriteSheet.getSprite(this.subsubtype+ this.type+(this.subtype+(this.lives-1))+this.currentDirection,this.animationContext);\n            }\n            //console.log(this.type+this.subtype+this.currentDirection);\n            \n            //console.log(\"\"+this.type+this.subtype+this.currentDirection+this.lives);\n            if (this.input.value.x === 0 && this.input.value.y === 0 ){\n                this.spriteSheet.getAnimation(this.subsubtype+this.type+(this.subtype+(this.lives-1))+this.currentDirection,this.animationContext).stop();\n            } else {\n                this.spriteSheet.getAnimation(this.subsubtype+this.type+(this.subtype+(this.lives-1))+this.currentDirection,this.animationContext).continue();\n            }    \n        } \n        //if (this.isDead){\n        //    this.currentSprite = null;\n        //}\n        //remove bullets\n        this.removeBullets();\n        \n        //update bullets\n        for (var b in this.bullets)               \n            this.bullets[b].update();\n            \n        \n        if (this.isDead && this.bullets.length===0){\n            this.spawnerInstance.removeDeadEnemy(this);\n        }\n    };\n    \n    this.fireCoolDown=function(){\n        this.canFire = true;\n        \n    }\n    \n    this.die = function(){\n        //this.lives++;\n        if (this.subsubtype === \"special\"){\n            //spawn item\n            this.itemSpanwerInstance.spawnItem();\n            this.subsubtype = \"\";\n        }\n        \n        if (this.type===\"player\" || (++this.lives) > this.maxLives){\n            allExplosions.push(new Explosion(this.pos.x,this.pos.y,explosionSpriteSheet, \"Big\"));\n            this.shieldSprite = null;\n            //this.bullets = []; // erase all player bullets\n            if (this.type===\"player\"){\n                this.spawnPlayer();\n            } else {\n                this.isDead = true;\n                this.currentSprite = null;\n                this.collisionInstance.removeDynamicCollider(this);\n                //this.spawnerInstance.removeDeadEnemy(this);\n            }\n        }\n    }\n    \n    this.removeBullets = function(){\n        for (var i=this.bullets.length-1; i>=0; i--){\n            if (this.bullets[i].remove){\n                this.collisionInstance.removeDynamicCollider( this.bullets[i] );\n                //create new collider for explosion\n                var explinfo = this.bullets[i].createExplosionObject()\n                this.collisionInstance.createDynamicCollider(explinfo, this.bullets[i].deafultExplosionCollision, this.bullets[i].explosionRect.offx, this.bullets[i].explosionRect.offy);\n                setTimeout((function(self) { return function() { self.col.removeDynamicCollider(self.obj)};})({col:this.collisionInstance, obj:explinfo.obj}), 1000); // <--- bah, to muito louco, wololo\n                this.bullets.splice(i,1);              \n            }\n        }\n    }\n    \n    this.isThisBulletFromThisPlayer = function(bullet){\n        for (var i=this.bullets.length-1; i>=0; i--){\n            if (this.bullets[i] == bullet){\n                return true;\n            }\n        }\n        return false;\n    };\n    \n    \n    // create a dynamic collider for the player, and a callback function that will execute when this collider hits something\n    // the function has access to the object itself and the other object it collided.\n    this.defaultCollision = function(info, other){      // function that is called when this obj collides with something\n        var self = info.obj;\n        var gridSize = 16;\n        if (other.type===\"tile\"  || other.type===\"invisible\"){\n            info.obj.pos.y = Math.round((info.obj.pos.y )/gridSize)*gridSize;\n            info.obj.pos.x = Math.round((info.obj.pos.x )/gridSize)*gridSize;  \n        }\n        if (other.type===\"player\" || other.type===\"enemy\" ){\n            if (info.obj.input.value.x === 0 && info.obj.input.value.y===0) return; //boa\n\n            var tile = {x:0,y:0};\n            tile.x = Math.floor(other.obj.pos.x+gridSize) - Math.floor(info.obj.pos.x+gridSize);\n            tile.y = Math.floor(other.obj.pos.y+gridSize) - Math.floor(info.obj.pos.y+gridSize);\n            \n            // this dumb player walk inside the spawn of another player\n            if (self.spawning) {\n                if (!contains(self.ignore, other.obj)) self.ignore.push(other.obj);\n                if (!contains(other.obj.ignore, self)) other.obj.ignore.push(self);\n                return;\n            }\n            \n            if (contains(self.ignore, other.obj)) {\n                return;\n            }\n            \n            \n            // if any of this is true, the obj should not be blocked\n            if (tile.x <= -26 && (info.obj.currentSpeed.y !== 0 || info.obj.currentSpeed.x > 0)) return;\n            if (tile.x >=  26 && (info.obj.currentSpeed.y !== 0 || info.obj.currentSpeed.x < 0)) return;\n            if (tile.y <= -26 && (info.obj.currentSpeed.x !== 0 || info.obj.currentSpeed.y > 0)) return;\n            if (tile.y >=  26 && (info.obj.currentSpeed.x !== 0 || info.obj.currentSpeed.y < 0)) return;            \n            \n            info.obj.pos.x = info.obj.posPrevious.x;\n            info.obj.pos.y = info.obj.posPrevious.y;\n\n            // align tank on the grid\n            if (info.obj.currentSpeed.x !== 0)\n                info.obj.pos.y = Math.round((info.obj.pos.y )/gridSize)*gridSize;            \n            else if (info.obj.currentSpeed.y !== 0)\n                info.obj.pos.x = Math.round((info.obj.pos.x )/gridSize)*gridSize;\n        }\n        \n        \n        if (self.spawning === false && other.type === \"bullet\" && !other.obj.remove){\n            \n            if (other.obj.owner.type !== self.type){    // if they are of different class, they can kill each other (player hit enemy, or enemy hit player)\n                other.obj.remove = true;\n                self.die();\n            } else {\n      \n            }             \n        }\n                 \n    };\n\n    this.setCollisionInstance = function(col){\n        this.collisionInstance = col;\n        this.createCollider();\n    }\n    \n    this.createCollider = function(){  \n        this.collisionInstance.createDynamicCollider({obj:this, type:this.type ,w:32,h:32}, this.defaultCollision); \n    };\n\n            \n        \n    \n} "]],"start1":0,"start2":0,"length1":0,"length2":13407}]],"length":13407}
{"contributors":[],"silentsave":false,"ts":1375818337390,"patch":[[{"diffs":[[0,"  this.l"],[-1,"ives = 1;"],[1,"evel = \"\";\n    this.lives = 4;  // number of lives the player can die;\n    this.health = 1; // enemy healt"],[0,"\n    thi"]],"start1":134,"start2":134,"length1":25,"length2":122},{"diffs":[[0,"speed = "],[1,"1."],[0,"2;\n    t"]],"start1":383,"start2":383,"length1":16,"length2":18},{"diffs":[[0,"d = "],[-1,"7"],[1,"5"],[0,";\n  "]],"start1":415,"start2":415,"length1":9,"length2":9},{"diffs":[[0,"ll;\n"],[-1,"    //this.shieldAnimContext = null;\n"],[0,"    "]],"start1":1045,"start2":1045,"length1":45,"length2":8},{"diffs":[[0,"ime = 0."],[-1,""],[0,""],[1,"3"],[0,"5*1000; "]],"start1":1173,"start2":1173,"length1":16,"length2":17},{"diffs":[[0,"ielded = false;\n"],[1,"    this.isFrozen = false;\n"],[0,"    this.ignore "]],"start1":1287,"start2":1287,"length1":32,"length2":59},{"diffs":[[0,"    "],[-1,"//"],[0,"this."],[-1,"bornTogether = false;\n    //this.shieldTime = 1*1000; // in ms\n"],[1,"points = null;"],[0,"    "]],"start1":1447,"start2":1447,"length1":78,"length2":27},{"diffs":[[0,"    "],[-1,"\n    this.collisionInstance = null"],[1,"this.doubleExplosionBullets = false;\n    this.breakSteel = false;\n    \n    this.collisionInstance = null;\n\n    this.upgradeLevel = function(newLevel_opt){\n        this.level++;\n        if (newLevel_opt != null) this.level = newLevel_opt;\n        \n        if (this.level>4) this.level=4;\n\n        if (this.level==1){\n            this.bulletSpeed = 5;\n            this.speed = 1.2;\n        }\n        if (this.level==2){\n            this.bulletSpeed = 7.5;\n            this.speed = 1.3;\n        }\n        if (this.level==3){\n            players[0].bulletSpeed = 7.5;\n            this.maxBullets = 2;\n            this.speed = 1.3;\n        }\n        if (this.level==4){\n            this.bulletSpeed = 7.5;\n            this.doubleExplosionBullets = true;\n            this.breakSteel = true;\n            this.maxBullets = 2;\n            this.speed = 1.3;\n        }\n    }\n    \n    this.upgradeLevel()"],[0,";\n  "]],"start1":1577,"start2":1577,"length1":42,"length2":900},{"diffs":[[0,"awn\");  "],[1,"\n"],[0,"        "],[-1,"  "],[1,"} else if (this.isDead){\n\n"],[0,"\n       "]],"start1":4170,"start2":4170,"length1":26,"length2":51},{"diffs":[[0,"s.is"],[-1,"Dead){\n            "],[1,"Frozen){\n            if (this.animationContext === null){\n                this.animationContext = this.spriteSheet.createContext(); \n            }\n            this.currentSprite = this.spriteSheet.getSprite(this.subsubtype+ this.type+(this.subtype+(this.health-1))+this.currentDirection+this.level,this.animationContext);\n            this.spriteSheet.getAnimation(this.subsubtype+this.type+(this.subtype+(this.health-1))+this.currentDirection+this.level,this.animationContext).stop();"],[0,"\n   "]],"start1":4236,"start2":4236,"length1":27,"length2":492},{"diffs":[[0,"tDirection;\n"],[1,"                    newbullet.breakSteel = this.breakSteel;\n"],[0,"            "]],"start1":7234,"start2":7234,"length1":24,"length2":84},{"diffs":[[0,"s.subtype+(this."],[-1,"lives"],[1,"health"],[0,"-1))+this.curren"]],"start1":8623,"start2":8623,"length1":37,"length2":38},{"diffs":[[0,"currentDirection"],[1,"+this.level"],[0,",this.animationC"]],"start1":8655,"start2":8655,"length1":32,"length2":43},{"diffs":[[0,"on+this."],[-1,"lives"],[1,"health"],[0,");\n     "]],"start1":8878,"start2":8878,"length1":21,"length2":22},{"diffs":[[0,"s.subtype+(this."],[-1,"lives"],[1,"health"],[0,"-1))+this.curren"]],"start1":9043,"start2":9043,"length1":37,"length2":38},{"diffs":[[0,"currentDirection"],[1,"+this.level"],[0,",this.animationC"]],"start1":9075,"start2":9075,"length1":32,"length2":43},{"diffs":[[0,"e+(this."],[-1,"lives"],[1,"health"],[0,"-1))+thi"]],"start1":9239,"start2":9239,"length1":21,"length2":22},{"diffs":[[0,"currentDirection"],[1,"+this.level"],[0,",this.animationC"]],"start1":9263,"start2":9263,"length1":32,"length2":43},{"diffs":[[0,";\n        \n    }"],[1,"\n\n    // froze player for a time\n    this.freeze = function(){\n        this.isFrozen = true;\n    }"],[0,"\n    \n    this.d"]],"start1":9828,"start2":9828,"length1":32,"length2":130},{"diffs":[[0,".die = function("],[1,"optLives"],[0,"){\n        //thi"]],"start1":9956,"start2":9956,"length1":32,"length2":40},{"diffs":[[0," //this."],[-1,"lives"],[1,"health"],[0,"++;\n    "]],"start1":9990,"start2":9990,"length1":21,"length2":22},{"diffs":[[0,"|| ("],[-1,"++"],[0,"this."],[-1,"l"],[1,"health+=optL"],[0,"ives"],[1,"||1"],[0,") > "]],"start1":10213,"start2":10213,"length1":20,"length2":32},{"diffs":[[0,"this.maxLives){\n"],[1,"            this.isFrozen = false;\n"],[0,"            allE"]],"start1":10245,"start2":10245,"length1":32,"length2":67},{"diffs":[[0,"t, \"Big\""],[1,", this.points"],[0,"));\n    "]],"start1":10382,"start2":10382,"length1":16,"length2":29},{"diffs":[[0,"=\"player\"){\n"],[1,"                this.upgradeLevel(1);\n"],[0,"            "]],"start1":10533,"start2":10533,"length1":24,"length2":62},{"diffs":[[0,"Object()"],[-1,""],[0,""],[1,";\n"],[0,"\n       "]],"start1":11211,"start2":11211,"length1":16,"length2":18},{"diffs":[[0,".obj}), "],[-1,"10"],[1,"2"],[0,"00); // "]],"start1":11560,"start2":11560,"length1":18,"length2":17},{"diffs":[[0,"                "],[1,"            \n                if (this.doubleExplosionBullets){\n                    var explinfo2 = this.bullets[i].createExplosionObject();\n                    var bulletdir = this.bullets[i].intDirection;\n                    this.collisionInstance.createDynamicCollider(explinfo2, this.bullets[i].deafultExplosionCollision, this.bullets[i].explosionRect.offx+bulletdir.x*8, this.bullets[i].explosionRect.offy+bulletdir.y*8);\n                    setTimeout((function(self) { return function() { self.col.removeDynamicCollider(self.obj)};})({col:this.collisionInstance, obj:explinfo2.obj}), 200); // <--- bah, to muito louco, wololo\n                }\n                "],[0,"this.bullets.spl"]],"start1":11610,"start2":11610,"length1":32,"length2":698},{"diffs":[[0,"ce(i,1);"],[-1,"            "],[0,"  \n     "]],"start1":12309,"start2":12309,"length1":28,"length2":16},{"diffs":[[0,"ts[i] =="],[-1,""],[0,""],[1,"="],[0," bullet)"]],"start1":12491,"start2":12491,"length1":16,"length2":17},{"diffs":[[0,"visible\""],[-1,""],[0,""],[1," || other.type===\"general\""],[0,"){\n     "]],"start1":13042,"start2":13042,"length1":16,"length2":42},{"diffs":[[0,"llet\" &&"],[1," !self.isShielded &&"],[0," !other."]],"start1":15099,"start2":15099,"length1":16,"length2":36},{"diffs":[[0,"her.obj."],[-1,"remove"],[1,"hit "],[0,"){"],[-1,"\n"],[0,"        "]],"start1":15131,"start2":15131,"length1":25,"length2":22},{"diffs":[[0," player)"],[1,"    "],[0,"\n       "]],"start1":15305,"start2":15305,"length1":16,"length2":20},{"diffs":[[0,"obj."],[-1,"remove"],[1,"hit"],[0," = true;"],[1,"             "],[0,"\n   "]],"start1":15340,"start2":15340,"length1":22,"length2":32}]],"length":15809,"saved":false}
{"ts":1375818347913,"patch":[[{"diffs":[[0,"deLevel("],[1,"this.level"],[0,");\n    \n"]],"start1":2464,"start2":2464,"length1":16,"length2":26}]],"length":15819,"saved":false}
{"ts":1375818369756,"patch":[[{"diffs":[[0,"Level_opt){\n"],[1,"        if (newLevel_opt=\"\")return;\n"],[0,"        this"]],"start1":1724,"start2":1724,"length1":24,"length2":60}]],"length":15855,"saved":false}
{"ts":1375818373437,"patch":[[{"diffs":[[0,"vel_opt="],[1,"=="],[0,"\"\")retur"]],"start1":1753,"start2":1753,"length1":16,"length2":18}]],"length":15857,"saved":false}
{"ts":1375818567332,"patch":[[{"diffs":[[0,"    "],[-1,"this.upgradeLevel(this.level);"],[0,"\n   "]],"start1":2488,"start2":2488,"length1":38,"length2":8}]],"length":15827,"saved":false}
{"ts":1375818574759,"patch":[[{"diffs":[[0,"peed = 1.2;\n"],[1,"            this.maxBullets = 2;\n"],[0,"        }\n  "]],"start1":1987,"start2":1987,"length1":24,"length2":57}]],"length":15860,"saved":false}
{"ts":1375818578063,"patch":[[{"diffs":[[0,"is.maxBullets = "],[-1,"2"],[1,"1"],[0,";\n        }\n    "]],"start1":2013,"start2":2013,"length1":33,"length2":33},{"diffs":[[0,"is.speed = 1.3;\n"],[1,"            this.maxBullets = 2;\n"],[0,"        }\n      "]],"start1":2120,"start2":2120,"length1":32,"length2":65}]],"length":15893,"saved":false}
{"ts":1375818579991,"patch":[[{"diffs":[[0,"is.maxBullets = "],[-1,"2"],[1,"1"],[0,";\n        }\n    "]],"start1":2150,"start2":2150,"length1":33,"length2":33}]],"length":15893,"saved":false}
{"ts":1375818656722,"patch":[[{"diffs":[[0,"level=4;"],[1,"\n        this.doubleExplosionBullets = true;\n            this.breakSteel = true;"],[0,"\n\n      "]],"start1":1897,"start2":1897,"length1":16,"length2":96}]],"length":15973,"saved":false}
{"ts":1375818658554,"patch":[[{"diffs":[[0,"= true;\n        "],[-1,"    "],[0,"this.breakSteel "]],"start1":1942,"start2":1942,"length1":36,"length2":32}]],"length":15969,"saved":false}
{"ts":1375818667047,"patch":[[{"diffs":[[0,"losionBullets = "],[-1,"tru"],[1,"fals"],[0,"e;\n        this."]],"start1":1928,"start2":1928,"length1":35,"length2":36},{"diffs":[[0,"Steel = "],[-1,"tru"],[1,"fals"],[0,"e;\n\n    "]],"start1":1969,"start2":1969,"length1":19,"length2":20}]],"length":15971,"saved":false}
{"contributors":[],"silentsave":false,"ts":1375841320568,"patch":[[{"diffs":[[0,"lives = "],[-1,"4"],[1,"5"],[0,";  // nu"]],"start1":162,"start2":162,"length1":17,"length2":17}]],"length":15971,"saved":false}
{"ts":1375841581270,"patch":[[{"diffs":[[0,"=\"player\"){\n"],[1,"                this.lives--;\n"],[0,"            "]],"start1":10695,"start2":10695,"length1":24,"length2":54}]],"length":16001,"saved":false}
{"ts":1375844979322,"patch":[[{"diffs":[[0,"me = 0.3"],[-1,"5"],[1,"0"],[0,"*1000; /"]],"start1":1174,"start2":1174,"length1":17,"length2":17}]],"length":16001,"saved":false}
{"ts":1375844992298,"patch":[[{"diffs":[[0,"ime = 0."],[-1,"30"],[1,"24"],[0,"*1000; /"]],"start1":1173,"start2":1173,"length1":18,"length2":18}]],"length":16001,"saved":false}
{"ts":1375844993777,"patch":[[{"diffs":[[0,"me = 0.2"],[-1,"4"],[1,"5"],[0,"*1000; /"]],"start1":1174,"start2":1174,"length1":17,"length2":17}]],"length":16001,"saved":false}
{"contributors":[],"silentsave":false,"ts":1376027052471,"patch":[[{"diffs":[[0," = null;"],[1,"\n    \n    //only for enemies\n    this.probOfChangeDirection = 1;"],[0,"\n\n    th"]],"start1":1678,"start2":1678,"length1":16,"length2":80},{"diffs":[[0,"eldOn(1*"],[-1,"3"],[1,"6"],[0,"000);\n  "]],"start1":3437,"start2":3437,"length1":17,"length2":17},{"diffs":[[0,"    }\n        }\n"],[1,"    }\n    \n    this.removeAllBullets = function(){\n        for (var i=this.bullets.length-1; i>=0; i--){\n            this.collisionInstance.removeDynamicCollider( this.bullets[i] );\n            this.bullets.splice(i,1);  \n        }\n\n"],[0,"    }\n    \n    t"]],"start1":11113,"start2":11113,"length1":32,"length2":265}]],"length":16298,"saved":false}
{"ts":1376027088005,"patch":[[{"diffs":[[0,"tion = 1"],[1,"00"],[0,";\n\n    t"]],"start1":1741,"start2":1741,"length1":16,"length2":18}]],"length":16300,"saved":false}
{"ts":1376027598046,"patch":[[{"diffs":[[0,"ction = "],[-1,"10"],[1,"3"],[0,"0;\n\n    "]],"start1":1740,"start2":1740,"length1":18,"length2":17}]],"length":16299,"saved":false}
{"ts":1376028148429,"patch":[[{"diffs":[[0,"ction = "],[-1,"3"],[1,"10"],[0,"0;\n\n    "]],"start1":1740,"start2":1740,"length1":17,"length2":18}]],"length":16300,"saved":false}
{"ts":1376028209290,"patch":[[{"diffs":[[0,"el = false;\n"],[1,"    this.isColliding = false;\n"],[0,"    \n    thi"]],"start1":1635,"start2":1635,"length1":24,"length2":54}]],"length":16330,"saved":false}
{"ts":1376028271563,"patch":[[{"diffs":[[0,"dSize = 16;\n"],[1,"        self.isColliding = false;\n"],[0,"        if ("]],"start1":13499,"start2":13499,"length1":24,"length2":58}]],"length":16364,"saved":false}
{"ts":1376028280412,"patch":[[{"diffs":[[0,"gridSize;  \n"],[1,"            self.isColliding = true;\n"],[0,"        }\n  "]],"start1":13780,"start2":13780,"length1":24,"length2":61}]],"length":16401,"saved":false}
{"ts":1376028301263,"patch":[[{"diffs":[[0,"=\"enemy\" ){\n"],[1,"            self.isColliding = true;\n"],[0,"            "]],"start1":13888,"start2":13888,"length1":24,"length2":61}]],"length":16438,"saved":false}
{"ts":1376028520734,"patch":[[{"diffs":[[0," ){\n"],[-1,"            self.isColliding = true;\n"],[0,"    "]],"start1":13896,"start2":13896,"length1":45,"length2":8}]],"length":16401,"saved":false}
{"ts":1376028591629,"patch":[[{"diffs":[[0,"ction = "],[-1,"1"],[1,"2"],[0,"00;\n\n   "]],"start1":1770,"start2":1770,"length1":17,"length2":17}]],"length":16401,"saved":false}
{"ts":1376030008757,"patch":[[{"diffs":[[0,") > "],[-1,"35*35"],[1,"40*40"],[0,"){ /"]],"start1":5515,"start2":5515,"length1":13,"length2":13}]],"length":16401,"saved":false}
